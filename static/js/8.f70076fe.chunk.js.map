{"version":3,"sources":["mylib/hooks/useState.tsx","flex-form-demo/basic.tsx","flex-form-demo/edit-demo.tsx","flex-form-demo/routing.tsx","mylib/components/flex-form/interface.tsx","mylib/components/flex-form/fields/index.tsx","mylib/hooks/useReadOnly.tsx","mylib/components/flex-form/utils/field-util.tsx","mylib/components/flex-form/flex-form.component.tsx"],"names":["useState","initialValue","React","innerValue","setInnerValue","param","Array","isArray","pre","formItemLayout","labelCol","xs","span","sm","wrapperCol","BasicDemo","metas","name","label","rules","required","type","min","max","fieldType","options$","Promise","resolve","value","map","it","allowClear","age","gender","favirateFoods","agree","val","setVal","className","style","lineHeight","JSON","stringify","width","initializeValue","onChange","values","GroupDemo","isGroup","validator","ruleObj","includes","reject","fundName","accountDetail","accountName","investorType","commitAmount","addressInfo","country","city","isPrimaryAddress","contactDetail","primaryUser","visitedCities","marginBottom","BasicListDemo","contacts","email","isPrimary","formRef","useRef","onClick","console","log","current","getFieldsValue","ref","isList","arrayChildren","vals","BasicFlexForm","fontSize","height","fontWeight","margin","marginTop","fontStyle","DynamicFieldDemo","user","food","hidden","setMetas","shouldhidden","node","find","EditableFieldDemo","addresses","street","readonly","editable","edit","setEdit","htmlFor","Group","id","target","EditableFlexForm","SubRoute","path","ArrayIndexContext","tuple","createContext","FlexFieldContext","Item","Form","List","FlexField","children","changeReadonly","rest","options","setOptions","useEffect","then","opts","position","paddingRight","readOnly","disabled","mode","right","icon","EditOutlined","SaveOutlined","getValuePropName","FlexFieldItem","originalName","restProps","arrayIndexContext","useContext","toArray","valuePropName","FlexFieldArrayWrapper","fields","operation","remove","field","index","child","serializeName","serializesName","data","noStyle","DeleteOutlined","Provider","key","FlexFieldItemWrapper","fieldContext","internalReadonly","setInternalReadonly","editableRef","useReadOnly","setReadonly","hasNoLabel","undefined","mergedLabelCol","_","omit","meta","PlusCircleOutlined","add","ROOT_NAME","join","getFlexProps","isPlainObject","length","last","fieldTypeResolver","convertToNodes","parent","dataObj","visitedNode","metasMap","prefixName","prefixNamePath","Object","entries","push","set","maxlen","i","childTreeRootNode","buildFlexTree","consolidateTreeNode","result","consolidateFlexTree","root","queue","shift","forEach","skipSort","treeNode","Map","metasObj","slice","has","get","defaultLabelCol","defaultItemCol","FlexForm","originalForm","form","useForm","useImperativeHandle","fieldContextValue","useMemo","initialValues","onFieldsChange","allFields","rootNode","convertToFlexFieldElements","forwardRef"],"mappings":"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","file":"static/js/8.f70076fe.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\ntype setValueFunc<T> = (val:(T|Partial<T>|((pre:T)=>T)))=>void;\r\n\r\nexport function useState<T=any>(initialValue:T):[val:T,setValue:setValueFunc<T>]{\r\n    const [innerValue,setInnerValue]=React.useState(initialValue);\r\n    const changeValue:setValueFunc<T> = (param)=>{\r\n        if(typeof param === 'function'){\r\n            setInnerValue(param);\r\n        }else if(Array.isArray(param)){\r\n            setInnerValue(pre=>param as T);\r\n        }else if(typeof param === 'object'){\r\n            setInnerValue(pre=>({...pre,...param}));\r\n        }\r\n        else{\r\n            setInnerValue(pre=>param as T);\r\n        }\r\n    }\r\n    return [innerValue,changeValue];\r\n}","import React from 'react';\r\nimport { MetaConfig } from '../mylib/components/flex-form/interface';\r\nimport FlexForm from '../mylib/components/flex-form/flex-form.component';\r\nimport { Button, FormInstance } from 'antd';\r\n\r\ninterface UserTypeDemo {\r\n    name: string;\r\n    age: number;\r\n    isBoy: boolean;\r\n    [k: string]: any;\r\n}\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 4 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 20 },\r\n    }\r\n}\r\nconst BasicDemo = () => {\r\n    const metas: MetaConfig[] = [\r\n        {\r\n            name: 'name',\r\n            label: '用户全名',\r\n            rules: [{ required: true, }]\r\n        },\r\n        {\r\n            name: 'age',\r\n            label: '年纪',\r\n            rules: [{ required: true }, { type: 'number', min: 0, max: 99 }],\r\n            fieldType: 'inputnumber',\r\n        },\r\n        {\r\n            name: 'gender',\r\n            label: '性别',\r\n            rules: [{ required: true }],\r\n            fieldType: 'radiobox',\r\n            options$: Promise.resolve([{ label: 'Female', value: 'female' }, { label: 'Male', value: 'male' }, { label: 'Other', value: 'other' }]),\r\n        },\r\n        {\r\n            name: 'favirateFoods',\r\n            label: '喜欢的食物',\r\n            fieldType: 'select',\r\n            options$: Promise.resolve(['apple', 'pear', 'banana', 'peach', 'orange'].map(it => ({ label: it, value: it }))),\r\n        },\r\n        {\r\n            name: 'agree',\r\n            label: '是否同意',\r\n        },\r\n        {\r\n            name: 'book',\r\n            label: '喜欢的书籍',\r\n            fieldType: 'select',\r\n            options$: Promise.resolve(['book1', 'book2', 'book3']),\r\n            rules: [{ required: true }],\r\n            allowClear: true,\r\n        }\r\n    ];\r\n    const [val, setVal] = React.useState<any>(\r\n        { name: 'user1', age: 20, gender: 'male', favirateFoods: ['apple', 'pear'], agree: true }\r\n    );\r\n    return (\r\n        <div className=\"each-example\">\r\n            <h2>基本用法，Form的结构由数据来驱动</h2>\r\n            <p>表单的定义来自于数据+元数据的定义，这样表单就可以由外部的数据驱动产生</p>\r\n            <span style={{lineHeight:'50px'}}>Serialize User is {JSON.stringify(val)}</span>\r\n            <div style={{width:'40%'}}>\r\n                <FlexForm initializeValue={val} \r\n                metas={metas} \r\n                onChange={values => setVal(values as UserTypeDemo)}></FlexForm>\r\n            </div>            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst GroupDemo = () => {\r\n    const metas: MetaConfig[] = [\r\n        {\r\n            name: 'fundName',\r\n            label: '基金名称',\r\n        },\r\n        {\r\n            name: 'accountDetail',\r\n            label: '账号详情',\r\n            isGroup: true,\r\n        },\r\n        {\r\n            name: ['accountDetail', 'accountName'],\r\n            label: '账号名称',\r\n            rules: [{ required: true }, {\r\n                validator: (ruleObj, val) => {\r\n                    if (['account2', 'account3', 'account4'].includes(val)) {\r\n                        return Promise.reject('name already exist');\r\n                    } else {\r\n                        return Promise.resolve('');\r\n                    }\r\n                }\r\n            }]\r\n        },\r\n        {\r\n            name: ['accountDetail', 'investorType'],\r\n            label: '投资类型',\r\n            fieldType: 'select',\r\n            options$: Promise.resolve([{ label: 'Indivial', value: 12 }, { label: 'Entity', value: 1 }, { label: 'A Fund', value: 2 }]),\r\n            rules: [{ required: true }]\r\n        },\r\n        {\r\n            name: ['accountDetail', 'commitAmount'],\r\n            label: '投资金额',\r\n            rules: [{ type: 'number', min: 0 }],\r\n        },\r\n        {\r\n            name: 'addressInfo',\r\n            label: '地址详情',\r\n            isGroup: true,\r\n        },\r\n        {\r\n            name: ['addressInfo', 'country'],\r\n            label: '国家',\r\n            fieldType: 'select',\r\n            options$: Promise.resolve(['China', 'US', 'UK']),\r\n            rules: [{ required: true }]\r\n        },\r\n        {\r\n            name: ['addressInfo', 'city'],\r\n            label: '城市',\r\n        },\r\n        {\r\n            name: ['contactDetail', 'primaryUser'],\r\n            label: '主要联系人',\r\n            fieldType: 'radiobox',\r\n            options$: Promise.resolve(['user1', 'user2', 'user3', 'user4']),\r\n        },\r\n        {\r\n            name: ['contactDetail', 'visitedCities'],\r\n            label: '访问过的城市',\r\n            fieldType: 'checkbox',\r\n            options$: Promise.resolve(['Beijing', 'Nanjing', 'Shanghai', 'Hongkong', 'Guangzhou', 'Zhejiang'])\r\n        }\r\n\r\n    ]\r\n\r\n    const [val, setVal] = React.useState<any>({\r\n        fundName: 'fundName',\r\n        accountDetail: {\r\n            accountName: 'account1',\r\n            investorType: 12,\r\n            commitAmount: 100,\r\n        },\r\n        addressInfo: {\r\n            country: 'China',\r\n            city: 'Nanjing',\r\n            isPrimaryAddress: true,\r\n        },\r\n        contactDetail: {\r\n            primaryUser: 'user1',\r\n            visitedCities: ['Beijing', 'Nanjing']\r\n        }\r\n    });\r\n\r\n    return (\r\n        <div className=\"each-example\">\r\n            <h2 style={{marginBottom:'10px'}}>这个用例是用来证明，Form的数据结构中存在着虚拟节点，这些节点会被自动过滤掉</h2>\r\n            <p ><b>账号详情，地址详情，联系人信息</b>是三个分组，<b>联系人信息</b>因为没有配置标签，被自动过滤掉了，它的子节点<b>主要联系人，访问过的城市</b>被提高了一个层次</p>\r\n            <span>Serialize Form is {JSON.stringify(val)}</span>\r\n            <div style={{width:'60%'}}>\r\n                <FlexForm \r\n                {...formItemLayout}\r\n                initializeValue={val} \r\n                metas={metas} \r\n                onChange={values => setVal(values as UserTypeDemo)}></FlexForm>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nconst BasicListDemo = () => {\r\n    const [val, setVal] = React.useState<any>(\r\n        {\r\n            contacts: [\r\n                {\r\n                    email: 'user1.test@test.com',\r\n                    isPrimary: true,\r\n                    age: 12,\r\n                },\r\n                {\r\n                    email: 'user2.test@test.com',\r\n                    isPrimary: false,\r\n                    age: 21,\r\n                }\r\n            ]\r\n        }\r\n    );\r\n    const metas: MetaConfig[] = [\r\n        {\r\n            name: 'contacts',\r\n            isList: true,\r\n            label: '联系人列表',\r\n            arrayChildren: [\r\n                [\r\n                    {\r\n                        name: 'email',\r\n                        label: '邮箱',\r\n                        rules: [{ type: 'email' }]\r\n                    },\r\n                    {\r\n                        name: 'isPrimary',\r\n                        label: '是否主要联系人',\r\n                        fieldType: 'switch',\r\n                    },\r\n                    {\r\n                        name: 'age',\r\n                        label: '年龄',\r\n                        fieldType: 'inputnumber',\r\n                        rules: [{ type: 'integer', min: 0, max: 99 }]\r\n                    }\r\n\r\n                ]\r\n\r\n            ]\r\n        }\r\n    ];\r\n    const formRef = React.useRef<FormInstance>(null);\r\n\r\n    return (\r\n        <div className=\"each-example\">\r\n            <h2>这个是用来演示对于数组类型的支持，</h2>\r\n            <span>Serialize Form is {JSON.stringify(val)}</span><br/>\r\n            <Button onClick={() => { console.log(formRef.current?.getFieldsValue()) }}>打印值到console</Button>\r\n            <div style={{width:'60%'}}>\r\n                <FlexForm \r\n                {...formItemLayout}\r\n                initializeValue={val} ref={formRef}\r\n                    metas={metas} onChange={(vals) => { setVal(vals); console.log(vals); }}></FlexForm>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst BasicFlexForm:React.FC=()=>{\r\n    return (\r\n        <>\r\n        <div style={{lineHeight:'30px',fontSize:'18px',height:'30px',fontWeight:600,margin:'20px 10px'}}>\r\n            基于AntD Form 定义了一个FlexForm组件,我们只需给出Form的初始值，以及额外的元数据定义，那么，FlexForm会自动产生表单的定义。这样我们的表单完全由外部或者后端数据驱动</div>\r\n        <div style={{height:'30px',marginTop:'50px',fontStyle:'italic',fontSize:'14px'}}>基本的用法可以简化成<b>&lt;FlexForm initializeValue=val metas=metas &gt;&lt;/FlexForm&gt;</b></div>\r\n        <BasicDemo/>\r\n        <GroupDemo/>\r\n        <BasicListDemo/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BasicFlexForm;","import { FormInstance, Radio } from 'antd';\r\nimport React from 'react';\r\nimport {useState} from '../mylib/hooks/useState';\r\nimport { MetaConfig } from '../mylib/components/flex-form/interface';\r\nimport FlexForm from '../mylib/components/flex-form/flex-form.component';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 4 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 20 },\r\n    }\r\n}\r\n\r\n\r\nconst DynamicFieldDemo=()=>{\r\n    const user={\r\n        name:'user1',\r\n        food:'apple',\r\n    };\r\n    const [metas,setMetas]=useState<MetaConfig[]>([\r\n        {\r\n            name:'name',\r\n            label:'全名',\r\n            rules:[{required:true}]\r\n        },\r\n        {\r\n            name:'food',\r\n            label:'喜欢的水果',\r\n            fieldType:'radiobox',\r\n            options$:Promise.resolve(['apple','pear','other']),\r\n        },\r\n        {\r\n            name:'detail',\r\n            label:'喜欢的水果详情',\r\n            fieldType:'textbox',\r\n            hidden:true\r\n        }\r\n    ]);\r\n    const formRef = React.useRef<FormInstance>(null);\r\n    const [val,setVal]=useState<any>(user);\r\n    const onFormValueChange=(values:any)=>{\r\n        const shouldhidden = values?.['food']!=='other';\r\n        setMetas((pre)=>{\r\n            let node = pre.find(it=>it.name==='detail');\r\n            if(node?.hidden!==shouldhidden){\r\n                node!.hidden=shouldhidden;\r\n                return [...pre];\r\n            }else{\r\n                return pre;\r\n            }                \r\n        });\r\n        setVal(values);\r\n    }\r\n\r\n    return (\r\n        <div className=\"each-example\">\r\n            <h2>这个用例展示，表单中的某些字段依赖其他字段的值来显示或者隐藏</h2>\r\n            <p>当<b>喜欢的水果</b>字段选择其他时，第三个<b>详情字段</b>会出现</p>\r\n            <span>Serialize Form is {JSON.stringify(val)}</span>\r\n            <div style={{width:'50%'}}>\r\n            <FlexForm \r\n                {...formItemLayout}\r\n                initializeValue={user} \r\n                ref={formRef}\r\n                metas={metas} \r\n                onChange={onFormValueChange}></FlexForm>\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\ninterface EditableState{\r\n    readonly:boolean;\r\n    editable:boolean;\r\n}\r\n\r\nconst EditableFieldDemo=()=>{\r\n    const user={\r\n        name:'user1',\r\n        age:24,\r\n        gender:'female',\r\n        addresses:[{city:'Nanjing',street:'TaiPingNanRoad'},{city:'ShangHai',street:'PuDong'}]\r\n    };\r\n    const metas:MetaConfig[]=[\r\n        {\r\n            name:'gender',\r\n            label:'Gender',\r\n            fieldType:'radiobox',\r\n            options$:Promise.resolve(['female','male','other']),\r\n        },\r\n        {\r\n            name:'addresses',\r\n            isList:true,\r\n            label:'Contact Addresses:',\r\n            arrayChildren:[\r\n                [\r\n                    {\r\n                        name:'city',\r\n                        label:'City',\r\n                        fieldType:'select',\r\n                        options$:Promise.resolve(['ShangHai','Nanjing','Hangzhou','Beijing'])\r\n                    }\r\n                ]\r\n            ]\r\n        }\r\n    ];\r\n\r\n    const [val,setVal]=React.useState(user);\r\n    const [edit,setEdit]=useState<EditableState>({readonly:false,editable:false});\r\n    const {readonly,editable}=edit;\r\n    console.log(edit);\r\n\r\n    return (\r\n        <div className=\"each-example\">\r\n            <h2>这个用例展现表单在非编辑模式与编辑模式的切换</h2>\r\n            <p><b>表单的编辑模式</b>指，表单可以让所有的字段处于只读模式，只提供字段级别的编辑功能</p>\r\n            <p>在字段层级上，当表单的编辑功能打开后，字段会相应的出现编辑按钮</p>\r\n            <div>\r\n                <label htmlFor=\"editable\">是否打开表单可编辑功能</label>\r\n                <Radio.Group id='editable' value={editable} \r\n                    onChange={param=>setEdit({editable:param.target.value})}>\r\n                    <Radio value={false}>不打开</Radio>\r\n                    <Radio value={true}>打开</Radio>\r\n                </Radio.Group>\r\n            </div>\r\n            <div>\r\n                <label htmlFor=\"readonly\">设置所有的字段的状态，编辑模式还是只读模式</label>\r\n                <Radio.Group value={readonly} onChange={param=>setEdit({readonly:param.target.value})}>\r\n                    <Radio value={true}>只读模式</Radio>\r\n                    <Radio value={false}>编辑模式</Radio>\r\n                </Radio.Group>\r\n            </div>\r\n            <div>\r\n                <span>{JSON.stringify(val)}</span>\r\n            </div>\r\n            <div style={{width:'50%'}}>\r\n            <FlexForm\r\n                initializeValue={user}\r\n                metas={metas}\r\n                onChange={values=>setVal(values)}\r\n                {...edit}\r\n            ></FlexForm>\r\n            </div>\r\n            \r\n            \r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nconst EditableFlexForm:React.FC=()=>{\r\n    return (\r\n        <>\r\n        <DynamicFieldDemo/>\r\n        <EditableFieldDemo/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EditableFlexForm;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport BasicFlexForm from './basic';\r\nimport EditableFlexForm from './edit-demo';\r\n\r\nconst SubRoute:React.FC=()=>{\r\n    return (\r\n        <>\r\n        <Route path='/flex-form/basic'><BasicFlexForm/></Route>\r\n        <Route path='/flex-form/editable'><EditableFlexForm/></Route>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SubRoute;","import { ColProps } from \"antd\";\r\nimport { Rule } from \"antd/lib/form\";\r\nimport { FormListFieldData, FormListOperation } from \"antd/lib/form/FormList\";\r\nimport { NamePath } from \"antd/lib/form/interface\";\r\nimport { tuple } from \"antd/lib/_util/type\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst FieldTypes = tuple('textbox', 'inputnumber', 'switch', 'select', 'checkbox', 'radiobox','multiselect');\r\nexport type FieldType = typeof FieldTypes[number];\r\n\r\nexport interface FlexFieldProps {\r\n    name: NamePath;\r\n    label: string | React.ReactNode;\r\n    fieldType?: FieldType;\r\n    rules?: Rule[];\r\n    options$?: Promise<({ label: string | React.ReactNode, value: any } | string)[]>;\r\n    isGroup?: boolean;\r\n    isList?: boolean;\r\n    hidden?:boolean;\r\n    readonly?:boolean;\r\n    changeReadonly?:(readonly:boolean)=>void;\r\n    editable?:boolean;\r\n    wrapperCol?: ColProps;\r\n    labelCol?: ColProps;\r\n}\r\n\r\nexport type MetaConfig = Partial<FlexFieldProps> & { arrayChildren?: MetaConfig[][];[k: string]: any; }\r\n\r\nexport interface ConvertContext {\r\n    keyname: string;\r\n    value: any;\r\n    metas?: MetaConfig[];\r\n}\r\n\r\nexport interface InnerFlexFieldProps extends Pick<FlexFieldProps, 'fieldType' | 'options$'|'readonly'> {\r\n    [k: string]: any;\r\n}\r\n\r\nexport interface IFlexTreeNode {\r\n    serializeName: string;\r\n    children?: IFlexTreeNode[];\r\n    data?: FlexFieldProps;\r\n    name: NamePath;\r\n}\r\n\r\nexport interface FieldArrayItem {\r\n    fields: FormListFieldData[];\r\n    operation: FormListOperation,\r\n    meta: { errors: React.ReactNode[] };\r\n    children: IFlexTreeNode[];\r\n    readonly?:boolean;\r\n}\r\n\r\nexport const ArrayIndexContext = React.createContext<NamePath>([]);\r\n\r\nexport interface FlexFieldContextType{\r\n    readonly?:boolean;\r\n    editable?:boolean;\r\n    labelCol?:ColProps;\r\n    wrapperCol?:ColProps;\r\n}\r\n\r\nexport const FlexFieldContext = React.createContext<FlexFieldContextType>({});\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Children } from 'react';\r\nimport { Form, Input, Radio, Select, Switch, Checkbox, Button, InputNumber } from 'antd';\r\nimport { InnerFlexFieldProps, FieldType, FlexFieldProps, IFlexTreeNode, FieldArrayItem, ArrayIndexContext, FlexFieldContext } from '../interface';\r\nimport _ from 'lodash';\r\nimport { NamePath } from 'antd/lib/form/interface';\r\nimport { serializesName } from '../utils/field-util';\r\nimport { DeleteOutlined, EditOutlined, PlusCircleOutlined, SaveOutlined } from '@ant-design/icons';\r\nimport { toArray } from 'rc-field-form/lib/utils/typeUtil';\r\nimport './fields.scss';\r\nimport { useReadOnly } from '../../../hooks/useReadOnly';\r\n//import Checkbox from '../../../../components/checkbox';\r\nconst { Item, List } = Form;\r\n\r\nconst FlexField: React.FC<InnerFlexFieldProps> = ({ \r\n    fieldType, \r\n    children, \r\n    options$,\r\n    editable,\r\n    readonly,\r\n    changeReadonly,\r\n    ...rest }) => {\r\n    const [options, setOptions] = React.useState<{ label: string | React.ReactNode, value: any }[]>([]);\r\n    React.useEffect(() => {\r\n        options$?.then(opts => {\r\n            opts = opts.map(it => typeof it === 'string' ? ({ label: it, value: it }) : it)\r\n            setOptions(opts as any);\r\n        });\r\n    }, [options$]);\r\n    // 注意这边的...rest,之前有个bug, 没加这个，结果，它跟form 关联不上，因为这里面有onChange,value....等一堆东西.\r\n    const getToolbar=()=>{\r\n        if(!editable){\r\n            return null;\r\n        }\r\n        if(readonly){\r\n            return <Button icon={<EditOutlined/>} onClick={()=>changeReadonly(false)}></Button>\r\n        }else{\r\n            return <Button icon={<SaveOutlined/>} onClick={()=>changeReadonly(true)}></Button>\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{position:'relative',paddingRight:'50px',}}>\r\n                {fieldType === 'textbox' ? <Input {...rest} readOnly={readonly} /> : null}\r\n                {fieldType === 'switch' ? <Switch {...rest} disabled={readonly} /> : null}\r\n                {fieldType === 'inputnumber' ? <InputNumber {...rest} readOnly={readonly} /> : null}\r\n                {fieldType === 'select' ? <Select options={options} {...rest} disabled={readonly}></Select> : null}\r\n                {fieldType === 'multiselect'?<Select options={options} mode='multiple' disabled={readonly} {...rest}></Select>:null}\r\n                {\r\n                    fieldType === 'radiobox' ?\r\n                        <Radio.Group options={options} {...rest} disabled={readonly}>\r\n                        </Radio.Group> : null\r\n                }\r\n                {\r\n                    fieldType === 'checkbox' ?\r\n                        <Checkbox.Group options={options} {...rest} disabled={readonly}></Checkbox.Group> : null\r\n                }\r\n                <span style={{position:'absolute',right:'10px'}}>\r\n                    {getToolbar()}\r\n                </span>\r\n                \r\n            </div>  \r\n        </>\r\n    )\r\n}\r\nfunction getValuePropName(fieldType: FieldType | undefined) {\r\n    switch (fieldType) {\r\n        case 'switch': return 'checked';\r\n        default: return 'value';\r\n    }\r\n\r\n}\r\n\r\nconst FlexFieldItem: React.FC<FlexFieldProps> = ({ \r\n    name: originalName, \r\n    label,\r\n    hidden, \r\n    fieldType, \r\n    rules, \r\n    wrapperCol,\r\n    labelCol,\r\n    \r\n    ...restProps }) => {\r\n    const arrayIndexContext = React.useContext(ArrayIndexContext);\r\n    let name = [...toArray(arrayIndexContext), ...toArray(originalName)];\r\n    \r\n    return !hidden?(\r\n        <Item\r\n            name={name}\r\n            label={label}\r\n            valuePropName={getValuePropName(fieldType)}\r\n            rules={rules}\r\n            wrapperCol={wrapperCol}\r\n            labelCol={labelCol}\r\n        >\r\n            <FlexField fieldType={fieldType} {...restProps} />\r\n        </Item>\r\n    ):null;\r\n}\r\n\r\nconst FlexFieldArrayWrapper: React.FC<FieldArrayItem> = ({ fields, operation, children,readonly }) => {\r\n    const { remove } = operation;\r\n    return (\r\n        <>\r\n            {\r\n                fields.map((field, index) => {\r\n                    let child = { ...(children![0] as IFlexTreeNode), ...((children![index] || {}) as IFlexTreeNode) };\r\n                    let name: NamePath = [field.name];\r\n                    let serializeName = serializesName(index);\r\n                    let data = { ...child.data, name } as FlexFieldProps;\r\n                    child = { ...child, name, serializeName, data }\r\n                    return (\r\n                        <Item key={field.key} noStyle>\r\n                            <div className='flex-array-item'>\r\n                                {\r\n                                    readonly?null:<Button className='array-btn' \r\n                                    icon={<DeleteOutlined />} \r\n                                    onClick={() => remove(index)}></Button>\r\n                                }                                \r\n                                <ArrayIndexContext.Provider value={name}>\r\n                                    <FlexFieldItemWrapper  {...child} />\r\n                                </ArrayIndexContext.Provider>                            \r\n                            </div>                            \r\n                        </Item>\r\n                    );\r\n                })\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst FlexFieldItemWrapper: React.FC<IFlexTreeNode> = ({ data, children, name, serializeName }) => {\r\n    const fieldContext=React.useContext(FlexFieldContext);\r\n    const [readonly,setReadonly]=useReadOnly(fieldContext);\r\n    const {editable,labelCol,wrapperCol}=fieldContext;\r\n    const hasNoLabel = data?.label===undefined||data?.label===null||data?.label==='';\r\n    const mergedLabelCol = hasNoLabel?undefined:(data?.labelCol||labelCol);\r\n    if (data?.isGroup) {\r\n        return (\r\n            <Item\r\n                {..._.omit(data, ['name', 'isGroup','fieldType'])}\r\n                className='flex-group'\r\n                noStyle={hasNoLabel}\r\n                labelCol={mergedLabelCol}\r\n            >\r\n                {\r\n                    children?.map(it => (\r\n                        <FlexFieldItemWrapper key={it.serializeName} {...it} />\r\n                    ))\r\n                }\r\n            </Item>\r\n        );\r\n    } else if (data?.isList) {\r\n        return (\r\n            <List name={name}>\r\n                {\r\n                    (fields, operation, meta) => {\r\n                        return (\r\n                            <>\r\n                                <Item \r\n                                label={data?.label}\r\n                                noStyle={hasNoLabel}\r\n                                labelCol={mergedLabelCol}\r\n                                >\r\n                                    <FlexFieldArrayWrapper \r\n                                        fields={fields}\r\n                                        operation={operation}\r\n                                        meta={meta}\r\n                                        children={children as any}\r\n                                        readonly={readonly}\r\n                                        ></FlexFieldArrayWrapper>\r\n                                    {\r\n                                        readonly?null:\r\n                                            <Item>\r\n                                                <Button icon={<PlusCircleOutlined />} onClick={() => operation.add()}>Add</Button>\r\n                                            </Item>\r\n                                    }                                     \r\n                                </Item>\r\n                                \r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            </List>\r\n        )\r\n    }\r\n    else {\r\n        return <FlexFieldItem \r\n            {..._.omit(data, ['isGroup', 'isList'])} \r\n            readonly={readonly} \r\n            changeReadonly={setReadonly}\r\n            editable={editable}\r\n            labelCol={mergedLabelCol}\r\n            wrapperCol={wrapperCol}\r\n            ></FlexFieldItem>;\r\n    }\r\n}\r\n\r\nexport default FlexFieldItemWrapper;","import React from 'react';\r\nimport {  FlexFieldContextType } from '../components/flex-form/interface';\r\n\r\nexport function useReadOnly({readonly=false,editable=false}:FlexFieldContextType)\r\n:[boolean,(param:boolean)=>void]\r\n{\r\n    const [internalReadonly,setInternalReadonly]=React.useState(readonly);\r\n    const editableRef=React.useRef(editable);\r\n    editableRef.current=editable;\r\n\r\n    React.useEffect(()=>{\r\n        setInternalReadonly(readonly);\r\n    },[readonly]);\r\n\r\n    const changeReadonly=(target:boolean)=>{\r\n        if(editableRef.current){\r\n            setInternalReadonly(target);\r\n        }\r\n    }\r\n\r\n    return [internalReadonly,changeReadonly];\r\n}","import { NamePath } from \"antd/lib/form/interface\";\r\nimport _ from \"lodash\";\r\nimport React from \"react\";\r\nimport FlexFieldItemWrapper from \"../fields\";\r\nimport FlexFieldItem from \"../fields\";\r\nimport { ConvertContext, FieldType, FlexFieldProps, IFlexTreeNode, MetaConfig } from \"../interface\";\r\n\r\n\r\nexport function fieldTypeResolver(value: any): FieldType {\r\n    let t = typeof value;\r\n    switch (t) {\r\n        case 'string': return 'textbox';\r\n        case 'number':\r\n        case 'bigint': return 'inputnumber';\r\n        case 'boolean': return 'switch';\r\n    }\r\n    return 'textbox';\r\n}\r\n\r\nconst NAME_SPLIT = '__';\r\n\r\nconst ROOT_NAME = 'root';\r\n\r\nexport const serializesName = (name: NamePath) => {\r\n    if (_.isArray(name)) {\r\n        return name.join(NAME_SPLIT);\r\n    } else {\r\n        return `${name}`;\r\n    }\r\n}\r\n\r\nexport function convertToFlexFieldElements(dataObj: any, metas: MetaConfig[] = []): React.ReactElement {\r\n    const rootNode = buildFlexTree(dataObj, metas);\r\n    return (\r\n        <>\r\n            {rootNode.children?.map(it => <FlexFieldItemWrapper key={it.serializeName} {...it} />)}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// used to construct the flexprops which will be used to construct field\r\n// we target to determine the name, label, fieldtype of the field, and also, we will pass rules\r\n// options, layout settings e.g. to the FieldProps from meta.\r\n// if result returned from this function, it meas it need to render in DOM, otherwise, it is just a\r\n// virtual node, no DOM render required.\r\nconst getFlexProps = (serializeName: string, name: NamePath, value?: any, meta?: MetaConfig): FlexFieldProps | undefined => {\r\n    // if value is null, and meta is not null, use meta to construct the FlexFieldProps,\r\n    // by defautl fieldType is textbox,\r\n    if (value == null && !!meta) {\r\n        return {fieldType:'textbox', ...meta } as FlexFieldProps;\r\n    } \r\n    // if value is an object,return underfined if meta is null, otherwilse, use meta to render\r\n    // if meta is null, it means current node is a virtual node, we don't need to render it in dom\r\n    // it is just groupped by logic, e.g. {userInfo:{firstName:'San',lastName:'Zhang'}},by default \r\n    // userInfo don't need to render, we only need to render firstName, lastName, unless, we specify \r\n    // meta for userInfo emplicit.\r\n    else if (_.isPlainObject(value)) {\r\n        return !meta ? undefined : {fieldType:'textbox', ...meta } as FlexFieldProps;\r\n    } \r\n    // if value is an array and (we specify from meta that value is a list, or the items in the array is an \r\n    //  object), for this branch, it meas each item of the array is a subtree.\r\n    else if (_.isArray(value) && (meta?.isList || (value.length > 0 && _.isPlainObject(value[0])))) {\r\n        const label = meta?.label || `${_.last(_.toArray(name))}`;\r\n        return {\r\n            name,\r\n            label,\r\n            ...(meta || {}),\r\n            isList: true,\r\n        }\r\n    }\r\n    // by default case, we will determine the fieldType by value type, like number->inputnumber, bool -> switch\r\n    // others text.\r\n    else {\r\n        const fieldType = fieldTypeResolver(value);\r\n        const label = meta?.label || `${_.last(_.toArray(name))}`;\r\n        return {\r\n            name,\r\n            label,\r\n            fieldType,\r\n            ...(meta || {})\r\n        };\r\n    }\r\n}\r\n\r\n\r\n// consturct a tree under the specified parent, tree is mapped both from dataObject and metas.\r\n// every node of the Object or metas must have a node in the tree, but not every node need to render in DOM\r\n// the condition is if the data prop of the tree node exist, data prop will contain all necessery info\r\n// to render Field.\r\nconst convertToNodes = (parent: IFlexTreeNode, dataObj: any, visitedNode: Map<string, IFlexTreeNode>, metasMap: { [k: string]: MetaConfig }) => {\r\n    const { serializeName: prefixName, name: prefixNamePath } = parent;\r\n    for (let [key, value] of Object.entries(dataObj)) {\r\n        // construct the serializedName and namePath\r\n        let serializeName = prefixName === ROOT_NAME ? key : `${prefixName}${NAME_SPLIT}${key}`;\r\n        let meta = metasMap[serializeName];\r\n        if (meta) {\r\n            delete metasMap[serializeName];\r\n        }\r\n        let name = [..._.toArray(prefixNamePath), key] as NamePath;\r\n        let node: IFlexTreeNode = { serializeName, children: [], name };\r\n        // insert current node to the children of parent\r\n        parent.children?.push(node);\r\n        visitedNode.set(serializeName, node);\r\n        // construct the data props, which will be used to render field if not empty\r\n        node.data = getFlexProps(serializeName, name, value, meta);\r\n        // if the child value is an object we just call the function iterate\r\n        if (_.isPlainObject(value) && value != null) {\r\n            convertToNodes(node, value, visitedNode, metasMap);\r\n        } \r\n        // if the child Fields are list, we call the builFlexTree, as for list, we treat it as a sub tree.\r\n        else if (node.data?.isList) {\r\n            let children = [];\r\n            let maxlen = meta.arrayChildren?.length || 1;\r\n            for (let i = 0; i < maxlen; i++) {\r\n                let childTreeRootNode = buildFlexTree(i === 0&&value!=null ? (value as any)[0]||{} : {}, meta?.arrayChildren?.[i] || [], true);\r\n                childTreeRootNode.data = {\r\n                    isGroup: true,\r\n                    name: [],\r\n                    label: '',\r\n                }\r\n                if (childTreeRootNode.children!.length > 0) {\r\n                    children.push(childTreeRootNode);\r\n                }\r\n            }\r\n            node.children = children;\r\n        }\r\n    }\r\n}\r\n\r\n// Tree-Shake, we only keep treenode if it has data, for others we just ignore\r\n// we only check the first level of items which have data props, it may contains data in the \r\n// second/third, or more level, we will do it later.\r\nfunction consolidateTreeNode(node: IFlexTreeNode): IFlexTreeNode[] {\r\n    let result = [];\r\n    if (!!node.data) {\r\n        result.push(node!);\r\n        return result;\r\n    }\r\n    if (!node.children?.length) {\r\n        return [];\r\n    }\r\n    for (let child of node.children) {\r\n        result.push(...consolidateTreeNode(child));\r\n    }\r\n    return result;\r\n}\r\n\r\n//遍历树，去除一些辅助节点，也就是没有Item 的节点。或者没有children 的节点，留下的节点，都是要渲染的。\r\nfunction consolidateFlexTree(root: IFlexTreeNode): IFlexTreeNode {\r\n    let queue: IFlexTreeNode[] = [];\r\n    queue.push(root);\r\n    while (queue.length > 0) {\r\n        let node = queue.shift() as IFlexTreeNode;\r\n        if (!node.children?.length) { continue; }\r\n        let children: IFlexTreeNode[] = [];\r\n        // it meas every child will be render in DOM as Field\r\n        node.children?.forEach(child => {\r\n            children.push(...consolidateTreeNode(child));\r\n        });\r\n        node.children = children;\r\n        queue.push(...children);\r\n    }\r\n    return root;\r\n}\r\n\r\n\r\n// This is the main funciton to construct the Render Tree\r\nfunction buildFlexTree(dataObj: any, metas: MetaConfig[], skipSort?: boolean): IFlexTreeNode {\r\n    let treeNode: Map<string, IFlexTreeNode> = new Map<string, IFlexTreeNode>();\r\n    let metasObj: { [k: string]: MetaConfig } = {};\r\n    // transfer metas array into a meta map, key is the serialize name of meta, value is meta\r\n    for (let meta of metas) {\r\n        let name = serializesName(meta.name!);\r\n        metasObj[name] = meta;\r\n    }\r\n    // This is the root node\r\n    let root: IFlexTreeNode = {\r\n        serializeName: ROOT_NAME,\r\n        children: [],\r\n        name: [],\r\n    }\r\n\r\n    convertToNodes(root, dataObj, treeNode, metasObj);\r\n   \r\n    for (let [key, meta] of Object.entries(metasObj)) {\r\n        const name = _.toArray(meta.name);\r\n        let parent = root;\r\n        for (let i = 0; i < name.length; i++) {\r\n            let serializeName = serializesName(name.slice(0, 1 + i));\r\n            if (!treeNode.has(serializeName)) {\r\n                let node: IFlexTreeNode = {\r\n                    serializeName,\r\n                    children: [],\r\n                    name: name.slice(0, 1 + i),\r\n                    data: meta.isGroup ? undefined : { ...meta } as any,\r\n                }\r\n                parent.children?.push(node);\r\n                parent = node;\r\n            } else {\r\n                parent = treeNode.get(serializeName)!;\r\n            }\r\n        }\r\n    }\r\n\r\n    consolidateFlexTree(root);\r\n    // if (!skipSort) {\r\n    //     sortTree(root);\r\n    // }\r\n\r\n    return root;\r\n}\r\n\r\nfunction sortTree(root: IFlexTreeNode) {\r\n    let queue: IFlexTreeNode[] = [];\r\n    queue.push(root);\r\n    while (queue.length > 0) {\r\n        let node = queue.shift()!;\r\n        if (node.children && node.children.length > 0) {\r\n            node.children = node.children.sort((a, b) => {\r\n                if (!a.children || a.children.length == 0) {\r\n                    return (!b.children || b.children.length == 0) ? a.serializeName.localeCompare(b.serializeName) : -1;\r\n                } else if (!b.children || b.children.length == 0) {\r\n                    return 1;\r\n                } else {\r\n                    return a.serializeName.localeCompare(b.serializeName);\r\n                }\r\n            });\r\n            queue.push(...node.children);\r\n        }\r\n    }\r\n}\r\n\r\n","import { ColProps, Form } from 'antd';\r\nimport { FormInstance, FormProps, useForm } from 'antd/lib/form/Form';\r\nimport React, { useImperativeHandle } from 'react';\r\nimport { FlexFieldContext, MetaConfig } from './interface';\r\nimport { convertToFlexFieldElements } from './utils/field-util';\r\n\r\n\r\nexport interface IFlexInput {\r\n    [k: string]: string | number | boolean;\r\n}\r\n\r\nexport interface IFlexFormProps<T = any> extends Omit<FormProps<T>,'onChange'|'metas'|'initializeValue'>{\r\n    initializeValue: T;\r\n    onChange?: (values: T) => void;\r\n    metas?: MetaConfig[];\r\n    readonly?:boolean;\r\n    editable?:boolean;\r\n    labelCol?:ColProps;\r\n    wrapperCol?:ColProps;\r\n}\r\n\r\nconst defaultLabelCol:ColProps={\r\n    sm:{span:8},\r\n    xs:{span:24},\r\n}\r\nconst defaultItemCol:ColProps={\r\n    sm:{span:16},\r\n    xs:{span:24},\r\n}\r\n\r\nconst FlexForm: React.ForwardRefRenderFunction<FormInstance<any>, IFlexFormProps> = (\r\n    { \r\n        initializeValue, \r\n        onChange, \r\n        metas,\r\n        readonly,\r\n        editable,\r\n        labelCol=defaultLabelCol,\r\n        wrapperCol=defaultItemCol,\r\n        form:originalForm,\r\n        children,\r\n        ...rest }, ref) => {\r\n    const [form] = useForm(originalForm);\r\n    useImperativeHandle(ref, () => {\r\n        return form;\r\n    });\r\n    const fieldContextValue = React.useMemo(()=>({\r\n        readonly,\r\n        editable,\r\n        labelCol,\r\n        wrapperCol,\r\n    }),[readonly,\r\n        editable,\r\n        labelCol,\r\n        wrapperCol,]);\r\n    return (\r\n        <Form\r\n            // fields={fieldsData}\r\n            initialValues={initializeValue}\r\n            form={form}\r\n            onFieldsChange={(fields, allFields) => {\r\n                onChange?.(form.getFieldsValue());\r\n            }}            \r\n            {...rest}\r\n        >\r\n                <FlexFieldContext.Provider value={fieldContextValue}\r\n                >\r\n                    {\r\n                        React.useMemo(() => convertToFlexFieldElements(initializeValue, metas), [metas])\r\n                    }\r\n                </FlexFieldContext.Provider>\r\n                {children}\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default React.forwardRef(FlexForm);"],"sourceRoot":""}