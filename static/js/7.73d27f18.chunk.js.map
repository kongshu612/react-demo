{"version":3,"sources":["mylib/hooks/useState.tsx","fund-manager-demo/account-card.component.module.scss","fund-manager-demo/hooks/useDataSource.ts","fund-manager-demo/utlis/mock.ts","fund-manager-demo/model.ts","fund-manager-demo/fund-list.component.tsx","fund-manager-demo/account-card.component.tsx","fund-manager-demo/contact-editor.component.tsx","fund-manager-demo/fund-editor.component.tsx","fund-manager-demo/fund-demo.component.tsx","fund-manager-demo/routing.tsx"],"names":["useState","initialValue","React","innerValue","setInnerValue","param","Array","isArray","pre","module","exports","DataSourceContext","createContext","selectFunds","setFunds","getFunds","selectAccounts","setAccounts","getAccounts","selectContacts","setContacts","getContacts","setSelectedContacts","selectSelectedContacts","getSelectedContacts","selectCurrentAccounts","getCurrentAccounts","setCurrentAccounts","accounts","refreshCurrentAccounts","addAccount","account","removeAccount","getCurrentFund","setCurrentFund","fund","updateAccount","upsertContact","contact","removeContact","mockData","totalFund","funds","fill","map","it","index","key","fundName","_","flatten","fundKey","accountNumber","Math","ceil","random","i","companyName","commitAmount","companyType","floor","legalAddress","fundId","mockAccounts","contacts","mockContacts","currentAccounts","currentContacts","filter","accountId","accountIds","totalCount","ids","Set","id","fullName","emailAddress","phoneNumber","isPrimary","mockUser","max","CompanyType","defaultFundState","activeAccount","activeFund","searchKeyWord","selectedContacts","FundList","context","useContext","state","setState","contactKeys","setContactKeys","useEffect","sub","subscribe","f","label","value","data","unsubscribe","combineLatest","pipe","currentAccount","find","existingContacts","length","children","title","className","disabled","has","treenodes","accountsInDisplay","contactsInDisplay","includes","child","treeDiv","useRef","treeHeight","setTreeHeight","current","clientHeight","options","allowClear","placeholder","style","width","onChange","val","console","log","target","suffix","SearchOutlined","ref","treeData","checkable","height","itemHeight","onCheck","checked","selectedNodes","indexOf","onTreeNodesChecked","selectable","checkedKeys","AccountEdit","props","saveAccount","closeMe","accountEditMeta","name","rules","required","validator","Promise","reject","resolve","options$","private","public","hyber","startup","others","fieldType","Form","useForm","form","formError","setFormError","initialAccountValue","pick","initializeValue","metas","onFieldsChange","changedFields","allFields","errors","onFinish","resetFields","htmlType","onClick","AccountCard","deleteAccount","accountLabel","styles","icon","EditOutlined","type","compRef","DialogService","openComponent","content","destory","maskClosable","dependedElement","currentTarget","DeleteOutlined","Modal","confirm","onOk","contactList","position","right","liveValue","Object","assign","afterClose","updatedContact","onEditPrimary","findIndex","each","maxTagCount","selectedAccounts","distinctPrimaryContact","primaryContacts","forEach","initialValueObj","comRef","needToAdd","needToDelete","toadd","Number","parseInt","exec","push","todelete","onCloneContact","onRemoveContact","StarOutlined","display","color","ContactEditor","contactInEdit","saveContact","contactEditMeta","omit","originalKey","currentContactCount","Panel","Collapse","emptyAccount","emptyContact","FundEditor","accountList","showArrow","header","PlusCircleOutlined","addContact","UserAddOutlined","editPanel","collapsible","onRemoveAccount","accountListPanel","dataSource","renderItem","item","FundDemo","useMemo","_currentFund","_accounts","_funds","_contacts","_selectedContacts","_currentAccounts","subject","BehaviorSubject","observables","funds$","asObservable","accounts$","contacts$","selectedContacts$","currentAccounts$","next","consolidatePrimaryContact","primaryIndex","newFunds","newAccounts","newContacts","unshift","original","splice","getContext","setTimeout","checkedContacts","setCheckedContacts","transferClassName","classNames","Provider","undefined","existingAccount","toinsert","accountToAdd","values","includeToFund","fontSize","FundDemoRoute","path"],"mappings":"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","file":"static/js/7.73d27f18.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\n\r\ntype setValueFunc<T> = (val:(T|Partial<T>|((pre:T)=>T)))=>void;\r\n\r\nexport function useState<T=any>(initialValue:T):[val:T,setValue:setValueFunc<T>]{\r\n    const [innerValue,setInnerValue]=React.useState(initialValue);\r\n    const changeValue:setValueFunc<T> = (param)=>{\r\n        if(typeof param === 'function'){\r\n            setInnerValue(param);\r\n        }else if(Array.isArray(param)){\r\n            setInnerValue(pre=>param as T);\r\n        }else if(typeof param === 'object'){\r\n            setInnerValue(pre=>({...pre,...param}));\r\n        }\r\n        else{\r\n            setInnerValue(pre=>param as T);\r\n        }\r\n    }\r\n    return [innerValue,changeValue];\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"user-card\":\"account-card_component_user-card__3zAkg\",\"link\":\"account-card_component_link__3YkeE\",\"tool\":\"account-card_component_tool__2k516\",\"account-card\":\"account-card_component_account-card__2zfJY\"};","import React from 'react';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { IAccount, IAccountInEdit, IContact, IFund } from '../model';\r\n\r\nexport interface IFundObservable {\r\n    selectFunds: () => Observable<IFund[]>,\r\n    setFunds: (newFunds: IFund[]) => void,\r\n    getFunds: () => IFund[],\r\n}\r\n\r\nexport interface IAccountObservable {\r\n    selectAccounts: () => Observable<IAccount[]>,\r\n    setAccounts: (newAccounts: IAccount[]) => void,\r\n    getAccounts: () => IAccount[],\r\n}\r\n\r\nexport interface IContactObservable {\r\n    selectContacts: () => Observable<IContact[]>,\r\n    setContacts: (newContacts: IContact[]) => void,\r\n    getContacts: () => IContact[]\r\n}\r\n\r\nexport interface ISelectedContactObservable {\r\n    selectSelectedContacts: () => Observable<IContact[]>,\r\n    setSelectedContacts: (param: IContact[]) => void,\r\n    getSelectedContacts: () => IContact[],\r\n}\r\n\r\nexport interface ICurrentFundObservable {\r\n    setCurrentFund: (fund: IFund) => void,\r\n    getCurrentFund: () => IFund,\r\n    selectCurrentAccounts: () => Observable<IAccountInEdit[]>,\r\n    getCurrentAccounts: () => IAccountInEdit[],\r\n    refreshCurrentAccounts: () => void,\r\n    addAccount: (account: IAccountInEdit) => void,\r\n    removeAccount: (account: IAccountInEdit) => void,\r\n    setCurrentAccounts: (accounts: IAccountInEdit[]) => void,\r\n    updateAccount: (account: Partial<IAccountInEdit> & Pick<IAccountInEdit, 'key'>) => void,\r\n    upsertContact: (contact: IContact) => void;\r\n    removeContact: (contact: IContact) => void;\r\n}\r\n\r\nexport interface IDataSourceContext extends IFundObservable,\r\n    IAccountObservable,\r\n    IContactObservable,\r\n    ISelectedContactObservable,\r\n    ICurrentFundObservable {\r\n\r\n}\r\n\r\nconst getDefaultContext: () => IDataSourceContext = () => {\r\n    return <IDataSourceContext>({\r\n        selectFunds: () => [],\r\n        setFunds: () => { },\r\n        getFunds: () => [],\r\n\r\n        selectAccounts: () => [],\r\n        setAccounts: () => { },\r\n        getAccounts: () => [],\r\n\r\n        selectContacts: () => [],\r\n        setContacts: () => { },\r\n        getContacts: () => [],\r\n\r\n        setSelectedContacts: () => { },\r\n        selectSelectedContacts: () => [],\r\n        getSelectedContacts: () => [],\r\n\r\n        selectCurrentAccounts: () => [],\r\n        getCurrentAccounts: () => [],\r\n        setCurrentAccounts: (accounts: IAccountInEdit[]) => { },\r\n        refreshCurrentAccounts: () => { },\r\n        addAccount: (account: IAccountInEdit) => { },\r\n        removeAccount: (account: IAccountInEdit) => { },\r\n        getCurrentFund: () => { },\r\n        setCurrentFund: (fund: IFund) => { },\r\n        updateAccount: (account: Partial<IAccountInEdit> & Pick<IAccountInEdit, 'key'>) => { },\r\n        upsertContact: (contact: IContact) => { },\r\n        removeContact: (contact: IContact) => { },\r\n    } as unknown);\r\n}\r\n\r\n\r\nexport function getContext(): IDataSourceContext {\r\n    let _accounts: IAccount[] = [];\r\n    let _funds: IFund[] = [];\r\n    let _contacts: IContact[] = [];\r\n    let _selectedContacts: IContact[] = [];\r\n    let _currentAccounts: IAccountInEdit[] = [];\r\n    let _currentFund: IFund;\r\n    let subject = {\r\n        funds: new BehaviorSubject<IFund[]>(_funds),\r\n        accounts: new BehaviorSubject<IAccount[]>(_accounts),\r\n        contacts: new BehaviorSubject<IContact[]>(_contacts),\r\n        selectedContacts: new BehaviorSubject<IContact[]>(_selectedContacts),\r\n        currentAccounts: new BehaviorSubject<IAccountInEdit[]>(_currentAccounts),\r\n    }\r\n    let observables = {\r\n        funds$: subject.funds.asObservable(),\r\n        accounts$: subject.accounts.asObservable(),\r\n        contacts$: subject.contacts.asObservable(),\r\n        selectedContacts$: subject.selectedContacts.asObservable(),\r\n        currentAccounts$: subject.currentAccounts.asObservable(),\r\n    }\r\n    const selectFunds = () => observables.funds$;\r\n    const setFunds = (newFunds: IFund[]) => {\r\n        _funds = newFunds;\r\n        subject.funds.next(_funds);\r\n    }\r\n    const getFunds = () => _funds;\r\n\r\n    const selectAccounts = () => observables.accounts$;\r\n    const setAccounts = (newAccounts: IAccount[]) => {\r\n        _accounts = newAccounts;\r\n        subject.accounts.next(_accounts);\r\n    }\r\n    const getAccounts = () => _accounts;\r\n\r\n    const selectContacts = () => observables.contacts$;\r\n    const setContacts = (newContacts: IContact[]) => {\r\n        _contacts = newContacts;\r\n        subject.contacts.next(_contacts);\r\n    }\r\n    const getContacts = () => _contacts;\r\n\r\n    const selectSelectedContacts = () => observables.selectedContacts$;\r\n    const setSelectedContacts = (param: IContact[]) => {\r\n        _selectedContacts = param;\r\n        subject.selectedContacts.next(_selectedContacts);\r\n    }\r\n    const getSelectedContacts = () => _selectedContacts;\r\n\r\n    const setCurrentAccounts = (accounts: IAccountInEdit[]) => {\r\n        _currentAccounts = accounts;\r\n        refreshCurrentAccounts();\r\n    }\r\n    const selectCurrentAccounts = () => observables.currentAccounts$;\r\n    const getCurrentAccounts = () => _currentAccounts;\r\n    const refreshCurrentAccounts = () => {\r\n        subject.currentAccounts.next(_currentAccounts);\r\n    };\r\n    const addAccount = (account: IAccountInEdit) => {\r\n        _currentAccounts.unshift(account);\r\n        refreshCurrentAccounts();\r\n    };\r\n    const removeAccount = (account: IAccountInEdit) => {\r\n        _currentAccounts = _currentAccounts.filter(it => it != account);\r\n        refreshCurrentAccounts();\r\n    }\r\n    const getCurrentFund = () => _currentFund;\r\n    const setCurrentFund = (fund: IFund) => {\r\n        _currentFund = fund;\r\n    }\r\n    const updateAccount = (account: Partial<IAccountInEdit> & Pick<IAccountInEdit, 'key'>) => {\r\n        const { key } = account;\r\n        let original = _currentAccounts.find(it => it.key === key);\r\n        Object.assign(original, account);\r\n        refreshCurrentAccounts();\r\n    }\r\n    const upsertContact = (contact: IContact) => {\r\n        const account = _currentAccounts.find(it => it.key === contact.accountId);\r\n        let index = account!.contacts.findIndex(it => it.key === contact.key);\r\n        if (index >= 0) {\r\n            account?.contacts.splice(index, 1, contact);\r\n        } else {\r\n            account?.contacts.unshift(contact);\r\n        }\r\n        consolidatePrimaryContact(account!, contact);\r\n        refreshCurrentAccounts();\r\n    }\r\n    const removeContact = (contact: IContact) => {\r\n        const account = _currentAccounts.find(it => it.key === contact.accountId);\r\n        if (account) {\r\n            account.contacts = account.contacts.filter(it => it !== contact);\r\n            consolidatePrimaryContact(account);\r\n            refreshCurrentAccounts();\r\n        }\r\n    }\r\n\r\n    const consolidatePrimaryContact = (account: IAccountInEdit, contact?: IContact) => {\r\n        let primaryIndex = account.contacts.findIndex(it => it.isPrimary === true);\r\n        if (primaryIndex < 0) {\r\n            primaryIndex = 0;\r\n        }\r\n        if (contact?.isPrimary) {\r\n            primaryIndex = account.contacts.findIndex(it => it === contact);\r\n        }\r\n        account.contacts.forEach((it, index) => {\r\n            it.isPrimary = index === primaryIndex;\r\n        })\r\n    }\r\n\r\n    return {\r\n        selectFunds, setFunds, getFunds,\r\n        selectAccounts, setAccounts, getAccounts,\r\n        selectContacts, setContacts, getContacts,\r\n        selectSelectedContacts, setSelectedContacts, getSelectedContacts,\r\n        selectCurrentAccounts, refreshCurrentAccounts, addAccount, removeAccount, setCurrentAccounts, getCurrentFund, setCurrentFund, getCurrentAccounts, updateAccount, upsertContact, removeContact,\r\n    };\r\n}\r\n\r\n\r\nexport const DataSourceContext = React.createContext<IDataSourceContext>(getDefaultContext());","import { IAccount, IAccountInEdit, IContact, IFund } from \"../model\";\r\nimport _ from 'lodash';\r\n\r\nexport function mockData(totalFund: number): {\r\n    funds: IFund[],\r\n    accounts: IAccount[],\r\n    contacts: IContact[],\r\n    fund: IFund,\r\n    currentAccounts: IAccountInEdit[],\r\n} {\r\n    const funds = mockFunds(totalFund);\r\n    const accounts = mockAccounts(totalFund);\r\n    const contacts = mockContacts(accounts.map(it => it.key));\r\n    const fund: IFund = { key: `fund-${totalFund + 2}`, fundName: `基金${totalFund + 2}` };\r\n    const fundKey = fund.key;\r\n    const accountNumber = Math.ceil(Math.random() * 30);\r\n    const currentAccounts = new Array(accountNumber).fill(1).map((_, i) => <IAccountInEdit>({\r\n        key: `${fundKey}-account-${i + 1}`,\r\n        companyName: `某某投资公司${i + 1}`,\r\n        commitAmount: Math.ceil(Math.random() * 1000000),\r\n        companyType: Math.floor(Math.random() * 5),\r\n        legalAddress: '',\r\n        fundId: fundKey,\r\n    }));\r\n    const currentContacts = mockContacts(currentAccounts.map(it => it.key));\r\n    for (let account of currentAccounts) {\r\n        const { key } = account;\r\n        account.contacts = currentContacts.filter(it => it.accountId === key);\r\n    }\r\n    return { funds, accounts, contacts, fund, currentAccounts };\r\n}\r\n\r\nexport function mockFunds(total: number): IFund[] {\r\n    return new Array(total).fill(1).map((it, index) => ({\r\n        key: `fund-${index + 1}`,\r\n        fundName: `基金${index + 1}`,\r\n    }));\r\n}\r\n\r\nexport function mockAccounts(totalFund: number): IAccount[] {\r\n    return _.flatten(new Array(totalFund).fill(1).map((it, index) => {\r\n        const fundKey = `fund-${index + 1}`;\r\n        const accountNumber = Math.ceil(Math.random() * 30);\r\n        return new Array(accountNumber).fill(1).map((_, i) => <IAccount>({\r\n            key: `${fundKey}-account-${i + 1}`,\r\n            companyName: `某某投资公司${i + 1}`,\r\n            commitAmount: Math.ceil(Math.random() * 1000000),\r\n            companyType: Math.floor(Math.random() * 5),\r\n            legalAddress: '',\r\n            fundId: fundKey,\r\n        }));\r\n    }));\r\n}\r\n\r\nexport function mockContacts(accountIds: string[]): IContact[] {\r\n    return _.flatten(accountIds.map(accountId => {\r\n        const contactCount = Math.max(Math.floor(Math.random() * 5), 1);\r\n        return mockUser(contactCount, accountId);\r\n    }))\r\n}\r\n\r\nfunction mockUser(totalCount: number, accountId: string): IContact[] {\r\n    let ids = new Array(totalCount).fill(1).map(() => Math.ceil(Math.random() * 100));\r\n    let distinctIds = [...new Set(ids)];\r\n    return distinctIds.map((id, index) => ({\r\n        accountId,\r\n        fullName: `user${id} mock`,\r\n        emailAddress: `user${id}.mock@mock.com`,\r\n        phoneNumber: `phonenumber${id}`,\r\n        key: `${accountId}-${id}`,\r\n        isPrimary: index === 0\r\n    }));\r\n}","export interface IFund {\r\n    key: string;\r\n    fundName: string;\r\n}\r\n\r\nexport interface IAccount {\r\n    key: string;\r\n    companyName: string;\r\n    companyType: CompanyType;\r\n    commitAmount: number;\r\n    legalAddress: string;\r\n    fundId: string;\r\n}\r\n\r\nexport interface IAccountInEdit extends IAccount {\r\n    contacts: IContact[];\r\n}\r\n\r\nexport interface IContact {\r\n    key: string;\r\n    fullName: string;\r\n    emailAddress: string;\r\n    phoneNumber: string;\r\n    isPrimary: boolean;\r\n    accountId: string;\r\n}\r\n\r\nexport type IContactEdit = Omit<IContact, 'key'>;\r\n\r\nexport enum CompanyType {\r\n    private,\r\n    public,\r\n    hyber,\r\n    startup,\r\n    others,\r\n}","import React, { Key } from 'react';\r\nimport { DataSourceContext, IDataSourceContext } from './hooks/useDataSource';\r\nimport { IAccount, IContact, IFund } from './model';\r\nimport {Input, Select, Tree} from 'antd';\r\nimport { LabeledValue } from 'antd/lib/select';\r\nimport './fund-list.scss';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport { TreeDataNode } from 'rc-tree-select/lib/interface';\r\nimport { combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport _ from 'lodash';\r\nimport { useState } from '../mylib/hooks/useState';\r\n\r\ninterface ISelectOption extends LabeledValue{\r\n    data:any;\r\n}\r\n\r\ninterface ITreeNode extends TreeDataNode{\r\n    data:IAccount|IContact;\r\n    fundId:string;\r\n}\r\n\r\ninterface IFundEditState{\r\n    funds:ISelectOption[],\r\n    accounts:ISelectOption[],\r\n    contacts:ITreeNode[],\r\n    activeFund:ISelectOption|null,\r\n    activeAccount:ISelectOption|null,\r\n    searchKeyWord:string,\r\n    selectedContacts:ITreeNode[]|null,\r\n}\r\nconst defaultFundState:IFundEditState={\r\n    funds:[],\r\n    accounts:[],\r\n    contacts:[],\r\n    activeAccount:null,\r\n    activeFund:null,\r\n    searchKeyWord:'',\r\n    selectedContacts:null,\r\n}\r\n\r\nconst FundList:React.FC=()=>{\r\n    const context = React.useContext<IDataSourceContext>(DataSourceContext);\r\n    const {selectFunds,selectAccounts,selectContacts,setSelectedContacts,\r\n        selectCurrentAccounts,selectSelectedContacts}=context;\r\n    const [state,setState]=useState<IFundEditState>(defaultFundState);\r\n    const {funds,accounts,contacts,activeAccount,activeFund,searchKeyWord,selectedContacts}=state;\r\n    const [contactKeys,setContactKeys]=useState<{checked:Key[],halfChecked:Key[]}|Key[]>([]);\r\n    // Initialize\r\n    React.useEffect(()=>{\r\n        const sub = selectFunds().subscribe(f=>{\r\n            let funds = [...f||[]].map(it=>({\r\n                label:it.fundName,\r\n                value:it.key,\r\n                data:it,\r\n                key:it.key,\r\n            }));\r\n            setState({funds});\r\n        })\r\n\r\n        return ()=>sub.unsubscribe();\r\n    },[selectFunds]);\r\n    React.useEffect(()=>{\r\n        const sub = selectAccounts().subscribe(param=>{\r\n            let accounts =[...param||[]].map(it=>({\r\n                label:it.companyName,\r\n                value:it.key,\r\n                key:it.key,\r\n                data:it,\r\n            }));\r\n            setState({accounts});\r\n        });        \r\n            \r\n        return ()=>sub.unsubscribe();\r\n    },[selectAccounts]);\r\n    React.useEffect(()=>{\r\n        const sub = combineLatest([selectAccounts(),selectContacts(),selectCurrentAccounts()]).pipe(\r\n            map(([accounts,contacts,currentAccounts])=>{\r\n                return accounts.map(account=>{\r\n                    const currentAccount = currentAccounts.find(it=>it.companyName===account.companyName);\r\n                    let existingContacts=new Set();\r\n                    if(currentAccount&&currentAccount.contacts.length>0){\r\n                        existingContacts=new Set(currentAccount.contacts.map(it=>it.emailAddress));\r\n                    }\r\n                    const children = contacts\r\n                        .filter(contact=>contact.accountId===account.key)\r\n                        .map(contact =>({\r\n                            key:contact.key,\r\n                            data:contact,\r\n                            title:(<div className='user-card'>\r\n                                <div>{`${contact.fullName}`}</div>\r\n                                <div className='link'>{`${contact.emailAddress}`}</div>\r\n                            </div>),\r\n                            disabled:existingContacts.has(contact.emailAddress),\r\n                        }));\r\n                    let parentNode:ITreeNode={\r\n                        title:`${account.companyName}  (${children.length}联系人)`,\r\n                        key:account.key,\r\n                        fundId:account.fundId,\r\n                        data:account,\r\n                        children,\r\n                        disabled:children.filter(it=>!it.disabled).length===0,\r\n                    }\r\n                    return parentNode;\r\n                })\r\n            })\r\n        ).subscribe(treenodes=>{\r\n            setState({contacts:treenodes});\r\n        });\r\n\r\n        return ()=>sub.unsubscribe();\r\n    },[selectContacts,selectAccounts]);\r\n    React.useEffect(()=>{\r\n        const sub = selectSelectedContacts().subscribe(contacts=>{\r\n            setContactKeys(contacts.map(it=>it.key));\r\n        });\r\n        return ()=>sub.unsubscribe();\r\n    },[selectSelectedContacts]);\r\n\r\n    const accountsInDisplay = accounts\r\n        .filter(it=>!activeFund||(it.data as IAccount).fundId === activeFund.key);\r\n    const contactsInDisplay = contacts\r\n        .filter(it=>it.fundId===activeFund?.key && \r\n            (!activeAccount || it.key === activeAccount.key))\r\n        .filter(it=>!searchKeyWord?.length||\r\n            (it.data as IAccount).companyName.includes(searchKeyWord)||\r\n            it.children!.filter(child=>{\r\n                const contact = (child as ITreeNode).data as IContact;\r\n                return `${contact.fullName}`.includes(searchKeyWord)||\r\n                    contact.emailAddress.includes(searchKeyWord);\r\n            }).length>0\r\n            );    \r\n    \r\n    \r\n    // Event handler\r\n    const onSelectFund = (val:string|number)=>{\r\n        const fund = funds.find(it=>it.value === val);\r\n        console.log('selected fund is ',fund);\r\n        setState({activeFund:fund});\r\n    }\r\n    const onSelectAccount = (val:string|number)=>{\r\n        const account = accountsInDisplay.find(it=>it.value===val);\r\n        setState({activeAccount:account});\r\n    }\r\n    const onSearch:React.ChangeEventHandler<HTMLInputElement>=(param)=>{\r\n        setState({searchKeyWord:param.target.value});\r\n    }\r\n    const onTreeNodesChecked = (param:{checked:Key[],halfChecked:Key[]}|Key[])=>{\r\n        let checked:Key[]=[];\r\n        if('checked' in param){\r\n            checked=param.checked;\r\n        }else{\r\n            checked=param;\r\n        }\r\n        if(!checked?.length){\r\n            setSelectedContacts([]);\r\n            return;\r\n        }\r\n        const selectedNodes = _.flatten(contacts.map(it=>it.children))\r\n            .filter(it=>it!=null&&checked.indexOf(it.key)>=0)\r\n            .map(it=>(it as ITreeNode).data as IContact);\r\n        setSelectedContacts(selectedNodes);\r\n        //setContactKeys(param);\r\n    }\r\n\r\n    // Ref\r\n    const treeDiv = React.useRef<HTMLDivElement>(null);\r\n    const [treeHeight,setTreeHeight]=React.useState<number>(0);\r\n    React.useEffect(()=>{\r\n        setTreeHeight(treeDiv.current!.clientHeight);\r\n    },[])\r\n\r\n    \r\n\r\n    \r\n\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className=\"filter\">\r\n                <div className=\"item\">\r\n                    <Select options={funds} value={activeFund?.value} \r\n                    allowClear={true} placeholder='选择基金名称'\r\n                    style={{width:'100%'}} onChange={onSelectFund}></Select>\r\n                </div>\r\n                <div className=\"item\">\r\n                    <Select options={accountsInDisplay} value={activeAccount?.value} \r\n                    allowClear={true} placeholder='选择投资公司名称'\r\n                    style={{width:'100%'}} onChange={onSelectAccount}></Select>\r\n                </div>\r\n                <div className=\"item\">\r\n                    <Input value={searchKeyWord} onChange={onSearch}\r\n                        allowClear={true} suffix={<SearchOutlined/>}\r\n                        placeholder='通过关键字筛选'\r\n                    ></Input>\r\n                </div>\r\n            </div>\r\n            <div className=\"tree\" ref={treeDiv}>\r\n                <Tree treeData={contactsInDisplay} checkable={true} height={treeHeight}\r\n                    itemHeight={52} onCheck={(param)=>onTreeNodesChecked(param)} selectable={false}\r\n                    checkedKeys={contactKeys}                    \r\n                >\r\n                    \r\n                </Tree>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {FundList};","import { DeleteOutlined, EditOutlined, StarOutlined } from '@ant-design/icons';\r\nimport { Button,Form,Modal } from 'antd';\r\nimport React from 'react';\r\nimport { CompanyType, IAccount, IAccountInEdit, IContact } from './model';\r\nimport  styles from './account-card.component.module.scss';\r\nimport { FieldData } from 'rc-field-form/es/interface';\r\nimport _ from 'lodash';\r\nimport ContactEditor from './contact-editor.component';\r\nimport { MetaConfig } from '../mylib/components/flex-form/interface';\r\nimport FlexForm from '../mylib/components/flex-form/flex-form.component';\r\nimport { DialogService } from '../mylib/components/dynamic-dialog';\r\n\r\n\r\nexport interface IAccountEditProps{\r\n    initialValue:Partial<IAccount>;\r\n    getCurrentAccounts:()=>IAccountInEdit[];\r\n    saveAccount:(account:IAccountInEdit)=>void;\r\n    closeMe?:()=>void;\r\n}\r\n\r\nexport const AccountEdit:React.FC<IAccountEditProps>=(props:IAccountEditProps)=>{  \r\n    const {getCurrentAccounts,initialValue,saveAccount,closeMe}  = props;\r\n    const accountEditMeta:MetaConfig[]=[\r\n        {\r\n            name:'companyName',\r\n            label:'公司名称',\r\n            rules:[{required:true},\r\n                {\r\n                    validator:(_,value)=>{\r\n                        return getCurrentAccounts()\r\n                            .map(it=>it.companyName)\r\n                            .filter(it=>!!initialValue.key?.length?\r\n                                it!=initialValue.companyName:\r\n                                true)\r\n                            .includes(value)?\r\n                        Promise.reject('公司名称已经出现在当前的基金下。'):\r\n                        Promise.resolve('');\r\n                    }\r\n                }\r\n            ],\r\n        },\r\n        {\r\n            name:'companyType',\r\n            label:'公司类型',\r\n            rules:[{required:true}],\r\n            options$:Promise.resolve([\r\n                {label:'私有企业',value:CompanyType.private},\r\n                {label:'国有企业',value:CompanyType.public},\r\n                {label:'合资企业',value:CompanyType.hyber},\r\n                {label:'初创公司',value:CompanyType.startup},\r\n                {label:'其他',value:CompanyType.others},\r\n            ]),\r\n            fieldType:'select',\r\n        },\r\n        {\r\n            name:'commitAmount',\r\n            label:'投资金额',\r\n            rules:[{required:true}],  \r\n            fieldType:'inputnumber',\r\n            style:{width:'100%'},\r\n        },\r\n        {\r\n            name:'legalAddress',\r\n            label:'公司注册地址',\r\n            rules:[{required:true}],\r\n        },\r\n    ];\r\n    const [form] = Form.useForm();\r\n    const [formError,setFormError]=React.useState<boolean>(true);\r\n    const onFieldsChange =(changedFields:FieldData[],allFields:FieldData[])=>{        \r\n        setFormError(allFields.filter(it=>!!it.errors?.length).length>0);\r\n    }\r\n    const onSave=(value:IAccountInEdit)=>{\r\n        saveAccount(value);\r\n        form.resetFields();\r\n    }\r\n    let initialAccountValue = _.pick(initialValue,['companyName',\r\n        'commitAmount',\r\n        'legalAddress',\r\n        'companyType',\r\n        ]);\r\n    return (\r\n        <>\r\n            <FlexForm \r\n                initializeValue={initialAccountValue}\r\n                metas={accountEditMeta}  \r\n                form={form}  \r\n                onFieldsChange={onFieldsChange}   \r\n                onFinish={onSave}       \r\n            >\r\n                <div>\r\n                    <Button htmlType='reset' onClick={()=>closeMe?.()}>取消</Button>\r\n                    <Button disabled={formError}\r\n                        htmlType='submit'\r\n                        >确认</Button>\r\n                </div>\r\n            </FlexForm>        \r\n        </>\r\n    );\r\n}\r\n\r\nexport interface IAccountCardProps{\r\n    account:IAccountInEdit;\r\n    deleteAccount:(account:IAccountInEdit)=>void;\r\n    getCurrentAccounts:()=>IAccountInEdit[];\r\n    updateAccount:(account:Partial<IAccountInEdit>&Pick<IAccountInEdit,'key'>)=>void;\r\n    upsertContact:(contact:IContact)=>void;\r\n    removeContact:(contact:IContact)=>void;\r\n}\r\n\r\nconst AccountCard:React.FC<IAccountCardProps>=({account,\r\n    deleteAccount,\r\n    getCurrentAccounts,\r\n    updateAccount,\r\n    upsertContact,\r\n    removeContact,\r\n    }:IAccountCardProps)=>{\r\n    const {companyName,contacts}=account;\r\n    const onRemoveAccount = ()=>{\r\n        Modal.confirm({\r\n            title:'确定',\r\n            content:'你确定要删除这个投资公司吗？',\r\n            onOk:()=>deleteAccount(account),\r\n        });\r\n    }\r\n    const onEditAccount:React.MouseEventHandler<HTMLElement> = (param)=>{        \r\n        const onSaveAccount=(value:IAccountInEdit)=>{\r\n            value.key=account.key;\r\n            updateAccount(value);\r\n            compRef.destory();\r\n        }\r\n        const compRef = DialogService.openComponent({\r\n            title:'编辑投资公司信息',\r\n            content:(\r\n                <AccountEdit initialValue={account} \r\n                    getCurrentAccounts={getCurrentAccounts} \r\n                    saveAccount={onSaveAccount}\r\n                    closeMe={()=>{compRef.destory()}}\r\n                    ></AccountEdit>\r\n                ), \r\n            maskClosable:true,  \r\n            dependedElement:param.currentTarget,      \r\n        });\r\n    }\r\n\r\n    const onEditPrimary=(param:React.MouseEvent<HTMLElement, MouseEvent>,contact:IContact)=>{\r\n        const initialValue = _.pick(contact,['isPrimary']);\r\n        let liveValue= initialValue;\r\n        const onSavePrimaryChange=()=>{  \r\n            console.log('save live value',liveValue);\r\n            let updatedContact = {...contact,...liveValue};\r\n            console.log(updatedContact.isPrimary);\r\n            upsertContact(updatedContact);\r\n            compRef.destory();\r\n        }\r\n        const onChange = (value:any)=>{\r\n            Object.assign(liveValue,value);\r\n            console.log('after changte,',liveValue);\r\n        }\r\n        const compRef = DialogService.openComponent({\r\n            content:(\r\n                <FlexForm \r\n                    initializeValue={initialValue}\r\n                    onChange={onChange}\r\n                >\r\n                </FlexForm>),\r\n            maskClosable:true,  \r\n            dependedElement:param.currentTarget, \r\n            afterClose:onSavePrimaryChange,\r\n        });\r\n    }\r\n\r\n    const onRemoveContact = (contact:IContact)=>{\r\n        Modal.confirm({\r\n            content:'确定要删除这个联系人吗？',\r\n            title:'确定',\r\n            onOk:()=>removeContact(contact),            \r\n        })\r\n    }\r\n\r\n    const onCloneContact = (param:React.MouseEvent<HTMLElement, MouseEvent>,contact:IContact)=>{\r\n        const options = getCurrentAccounts().map(it=>({label:it.companyName,value:it.key}));\r\n        const accounts = getCurrentAccounts()\r\n            .filter(it=>it\r\n                .contacts\r\n                .findIndex(each=>each.emailAddress===contact.emailAddress)>=0)\r\n            .map(it=>it.key);\r\n        const metas:MetaConfig[]=[\r\n            {\r\n                name:'accounts',\r\n                fieldType:'multiselect',\r\n                label:'复制信息到其他公司',\r\n                placeholder:'请选择隶属的公司',\r\n                options$:Promise.resolve(options),\r\n                maxTagCount:2,\r\n            }\r\n        ];\r\n        let selectedAccounts = accounts;\r\n        const onChange=({accounts}:any)=>{\r\n            selectedAccounts=accounts;\r\n        }\r\n        const distinctPrimaryContact=(account:IAccountInEdit)=>{\r\n            if(account.contacts.length===0)return;\r\n            let primaryContacts = account.contacts.filter(it=>it.isPrimary);\r\n            if(primaryContacts.length===0){\r\n                account.contacts[0].isPrimary=true;\r\n            }else if(primaryContacts.length>1){\r\n                primaryContacts.forEach((it,index)=>{\r\n                    if(index>0){\r\n                        it.isPrimary=false;\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        const onCloneContacts=()=>{\r\n            let needToAdd = getCurrentAccounts()\r\n                .filter(account=>selectedAccounts.indexOf(account.key)>=0&&\r\n                    !~account.contacts.findIndex(it=>it.emailAddress===contact.emailAddress));\r\n            let needToDelete = getCurrentAccounts()\r\n                .filter(account=>account.contacts.findIndex(it=>it.emailAddress===contact.emailAddress)>=0&&\r\n                    !~selectedAccounts.indexOf(account.key)\r\n                );\r\n            for(let toadd of needToAdd){\r\n                let id = Number.parseInt(/\\d+/g.exec(contact.fullName)![0]);\r\n                toadd.contacts.push({...contact,\r\n                    accountId:toadd.key,\r\n                    key:`${toadd.key}-${id}`\r\n                });\r\n                distinctPrimaryContact(toadd);\r\n                updateAccount(toadd);\r\n            }\r\n            for(let todelete of needToDelete){\r\n                todelete.contacts=todelete.contacts.filter(it=>it.emailAddress!=contact.emailAddress);\r\n                distinctPrimaryContact(todelete);\r\n                updateAccount(todelete);\r\n            }\r\n            comRef.destory();\r\n        }\r\n        const initialValueObj={accounts};\r\n        const comRef = DialogService.openComponent({\r\n            content:(\r\n                <FlexForm\r\n                    initializeValue={initialValueObj}\r\n                    onChange={onChange}\r\n                    metas={metas}\r\n                ></FlexForm>\r\n            ),\r\n            maskClosable:true,\r\n            dependedElement:param.currentTarget,\r\n            afterClose:onCloneContacts,\r\n        })\r\n        \r\n    }\r\n\r\n    \r\n\r\n    const accountLabel = (\r\n        <div className={styles['account-card']}>{companyName} \r\n            <span>\r\n                <Button icon={<EditOutlined/>} type='link' className={styles['tool']}\r\n                    onClick={onEditAccount}\r\n                />\r\n                <Button icon={<DeleteOutlined/>} type='link' className={styles['tool']} \r\n                    onClick={onRemoveAccount}/>\r\n            </span>\r\n        </div>);\r\n    const contactList = contacts.map(contact=>(\r\n        <div className={styles['user-card']} key={contact.key}>\r\n            <div style={{position:'absolute',right:'10px'}}>\r\n                <Button icon={<i className=\"fa fa-toggle-on\"></i>} type='link' \r\n                    className={styles['tool']} onClick={(param)=>onEditPrimary(param,contact)}/>\r\n                <Button icon={<i className=\"fa fa-clone\"></i>} type='link'\r\n                 className={styles['tool']} onClick={(param)=>onCloneContact(param,contact)}/>\r\n                <Button icon={<DeleteOutlined/>} type='link' className={styles['tool']}\r\n                    onClick={()=>onRemoveContact(contact)}\r\n                />\r\n            </div>\r\n            <div>{contact.fullName} <StarOutlined style={{display:contact.isPrimary?'inline':'none',color:'red'}}/></div>\r\n            <div className={styles['link']}>{contact.emailAddress}</div>\r\n        </div>));\r\n\r\n    return (\r\n        <div>\r\n            {accountLabel}\r\n            {contactList}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AccountCard;","import React from 'react';\r\nimport { MetaConfig } from '../mylib/components/flex-form/interface';\r\nimport { IAccount, IAccountInEdit, IContact, IContactEdit } from './model';\r\nimport FlexFormSimple from '../mylib/components/flex-form/flex-form.component';\r\nimport _ from 'lodash';\r\nimport { useForm } from 'antd/lib/form/Form';\r\nimport { Button } from 'antd';\r\nimport { FieldData } from 'rc-field-form/lib/interface';\r\n\r\nexport interface IContactEditorProps{\r\n    contactInEdit:Partial<IContactEdit>;\r\n    saveContact:(contact:IContact)=>void;\r\n    closeMe?:()=>void;\r\n    getCurrentAccounts:()=>IAccountInEdit[];\r\n}\r\n\r\nconst ContactEditor:React.FC<IContactEditorProps>=(props)=>{\r\n    const {contactInEdit,closeMe,saveContact,getCurrentAccounts}=props;\r\n    const contactEditMeta:MetaConfig[]=[\r\n        {\r\n            name:'fullName',\r\n            label:'姓名',\r\n            rules:[{required:true}],\r\n        },\r\n        {\r\n            name:'emailAddress',\r\n            label:'邮箱地址',\r\n            rules:[{required:true},{type:'email'}],\r\n        },\r\n        {\r\n            name:'phoneNumber',\r\n            label:'电话号码',\r\n            rules:[{required:true}]\r\n        },\r\n        {\r\n            name:'isPrimary',\r\n            label:'是否为主要联系人',\r\n            fieldType:'switch',\r\n        },\r\n        {\r\n            name:'accountId',\r\n            label:'隶属的公司',\r\n            fieldType:'select',\r\n            rules:[{required:true}],\r\n            options$:Promise.resolve(getCurrentAccounts().map(it=>({label:it.companyName,value:it.key})))\r\n        }\r\n    ];\r\n    const [form]=useForm();\r\n    const initialValue = _.omit(contactInEdit,'key');\r\n    const [formError,setFormError]=React.useState(true);\r\n    const originalKey = (contactInEdit as any)['key'] as string;\r\n\r\n    const onFieldsChange = (changedFields:FieldData[],allFields:FieldData[])=>{\r\n        setFormError(allFields.filter(it=>it.errors?.length)?.length>0);\r\n    }\r\n    const onSaveContact = (value:IContactEdit)=>{\r\n        let currentContactCount = getCurrentAccounts()\r\n            .find(it=>it.key===value.accountId)\r\n            ?.contacts\r\n            ?.length ??0;\r\n        let key = !!originalKey?.length?originalKey:`${value.accountId}-${currentContactCount+1}`\r\n        saveContact({...value,key});\r\n        form.resetFields();\r\n    }\r\n    return (\r\n        <FlexFormSimple \r\n            initializeValue={initialValue}\r\n            metas={contactEditMeta}\r\n            form={form}\r\n            onFieldsChange={onFieldsChange}\r\n            onFinish={onSaveContact}\r\n        >\r\n            <div>\r\n                    <Button htmlType='reset' onClick={()=>closeMe?.()}>取消</Button>\r\n                    <Button disabled={formError}\r\n                        htmlType='submit'\r\n                        >确认</Button>\r\n                </div>\r\n        </FlexFormSimple>\r\n    )\r\n}\r\n\r\nexport default ContactEditor;","import React from 'react';\r\nimport {Button, Collapse, ColProps, Form, FormInstance, List} from 'antd';\r\nimport { DataSourceContext, IDataSourceContext } from './hooks/useDataSource';\r\nimport { PlusCircleOutlined, UserAddOutlined } from '@ant-design/icons';\r\nimport FlexFormSimple from '../mylib/components/flex-form/flex-form.component';\r\nimport { CompanyType, IAccount, IAccountInEdit, IContact, IContactEdit } from './model';\r\nimport { MetaConfig } from '../mylib/components/flex-form/interface';\r\nimport {Observable, of} from 'rxjs';\r\nimport AccountCard, { AccountEdit } from './account-card.component';\r\nimport { FieldData } from 'rc-field-form/lib/interface';\r\nimport ContactEditor from './contact-editor.component';\r\nimport { useState } from '../mylib/hooks/useState';\r\nconst {Panel}=Collapse;\r\n\r\n\r\ninterface FundEditState{\r\n    accountInEdit?:IAccount;\r\n    contactInEdit?:IContact;\r\n    accountList?:IAccountInEdit[];\r\n}\r\nconst emptyAccount:Partial<IAccount>={\r\n    companyName: '',\r\n    commitAmount: 0,\r\n    legalAddress: '',\r\n}\r\nconst emptyContact:Partial<IContact>={\r\n    fullName:'',\r\n    emailAddress:'',\r\n    phoneNumber:'',\r\n    isPrimary:false,\r\n}\r\n\r\n\r\nconst FundEditor:React.FC=()=>{\r\n    const context = React.useContext<IDataSourceContext>(DataSourceContext);\r\n    const {\r\n        selectCurrentAccounts,\r\n        setCurrentAccounts,\r\n        getCurrentAccounts,\r\n        updateAccount,\r\n        getCurrentFund,\r\n        upsertContact,\r\n        removeContact,\r\n        removeAccount,\r\n        }=context;\r\n    const [state,setState]=useState<FundEditState>({});\r\n    const {\r\n        accountList=[],\r\n    }=state;\r\n    \r\n\r\n\r\n    React.useEffect(()=>{\r\n        const sub = selectCurrentAccounts().subscribe(accounts=>{\r\n            setState({accountList:accounts});\r\n        });\r\n        return ()=>sub.unsubscribe();\r\n    },[selectCurrentAccounts]);\r\n\r\n    const onAddAccount=(account:IAccountInEdit)=>{\r\n        console.log(account);\r\n        account.contacts=[];\r\n        const fundKey = getCurrentFund().key;\r\n        account.key=`${fundKey}-contact-${accountList.length + 1}`;\r\n        setCurrentAccounts([account,...accountList]);\r\n    }\r\n    const onAddContact=(contact:IContact)=>{\r\n        console.log(contact);\r\n        upsertContact(contact);\r\n    }\r\n\r\n\r\n    \r\n    const addAccount=(\r\n        <Panel key='1' showArrow={false}\r\n         header={<div><PlusCircleOutlined/> 添加一个新的投资公司</div>}>\r\n             <AccountEdit initialValue={emptyAccount} \r\n                getCurrentAccounts={getCurrentAccounts} \r\n                saveAccount={onAddAccount}></AccountEdit>\r\n        </Panel>\r\n    );\r\n    const addContact = (\r\n        <Panel key='2' showArrow={false}\r\n         header={<div><UserAddOutlined/> 添加一个新的联系人</div>}>\r\n            <ContactEditor\r\n                contactInEdit={emptyContact}\r\n                getCurrentAccounts={getCurrentAccounts}\r\n                saveContact={onAddContact}\r\n            ></ContactEditor>\r\n        </Panel>\r\n    )\r\n    const editPanel=(\r\n        <Collapse collapsible={'header'}>\r\n            {addAccount}\r\n            {addContact}\r\n        </Collapse>\r\n    )\r\n    const onRemoveAccount = (account:IAccountInEdit) =>{\r\n        removeAccount(account);\r\n        //setState({accountList:accountList.filter(it=>it!==account)})\r\n    }\r\n    const accountListPanel = (\r\n        <List dataSource={accountList}\r\n            renderItem={item => <AccountCard \r\n                account={item} \r\n                deleteAccount={onRemoveAccount}\r\n                updateAccount={updateAccount}\r\n                getCurrentAccounts={getCurrentAccounts}\r\n                upsertContact={upsertContact}\r\n                removeContact={removeContact}\r\n                />}\r\n        >\r\n            \r\n        </List>\r\n    )\r\n    return(\r\n        <>\r\n        {editPanel}\r\n        {accountListPanel}\r\n        </>\r\n    );\r\n}\r\n\r\nexport {FundEditor};","import { PlusCircleOutlined } from '@ant-design/icons';\r\nimport React from 'react';\r\nimport './fund-demo.scss';\r\nimport { DataSourceContext, getContext, IDataSourceContext } from './hooks/useDataSource';\r\nimport { IAccountInEdit, IContact, IContactEdit } from './model';\r\nimport { mockData, mockFunds } from './utlis/mock';\r\nimport classNames from 'classnames';\r\nimport { FundList } from './fund-list.component';\r\nimport { FundEditor } from './fund-editor.component';\r\n\r\nconst FundDemo:React.FC=()=>{\r\n    const context = React.useMemo(()=>getContext(),[]);\r\n\r\n    const {setFunds,setAccounts,setContacts,\r\n        selectSelectedContacts,getAccounts,setCurrentAccounts,\r\n        setCurrentFund,getCurrentFund,getCurrentAccounts,upsertContact,\r\n        addAccount,setSelectedContacts\r\n    }=context;\r\n    React.useEffect(()=>{\r\n        // Mock to load data from remote server\r\n        setTimeout(()=>{\r\n            const {funds,accounts,contacts,currentAccounts,fund}=mockData(100);\r\n            setFunds(funds);\r\n            setAccounts(accounts);\r\n            setContacts(contacts);\r\n            setCurrentFund(fund);\r\n            setCurrentAccounts(currentAccounts);\r\n        },1000);\r\n    },[]);\r\n\r\n    const [checkedContacts,setCheckedContacts]=React.useState<IContact[]>([]);\r\n    React.useEffect(()=>{\r\n        const sub =selectSelectedContacts().subscribe(\r\n            contacts=>{\r\n                setCheckedContacts(contacts);\r\n            }\r\n        );\r\n        return ()=>sub.unsubscribe();\r\n    },[selectSelectedContacts]);\r\n\r\n    const transferClassName =  classNames(\r\n        'btn-transfer-right',\r\n        {\r\n            'disabled':!checkedContacts?.length,\r\n        },\r\n    );\r\n\r\n    const includeToFund=()=>{\r\n        let accounts:{[k:string]:IAccountInEdit}={};\r\n        let fundId=getCurrentFund().key;\r\n        for(let contact of checkedContacts){\r\n            const {accountId}=contact;\r\n            if(accounts[accountId]===undefined){\r\n                let account:IAccountInEdit={\r\n                    ...getAccounts()\r\n                        .find(it=>it.key===accountId)!,\r\n                    contacts:[],\r\n                    fundId,\r\n                    key:'',                    \r\n                    };\r\n                accounts[accountId]=account;                \r\n            }\r\n            accounts[accountId].contacts.push({...contact,accountId:'',key:'',});\r\n        }\r\n        for(let account of Object.values(accounts)){\r\n            let existingAccount = getCurrentAccounts().find(it=>it.companyName===account.companyName);\r\n            if(existingAccount){\r\n                for(let contact of account.contacts){\r\n                    let {fullName}=contact;\r\n                    let {key:accountId}=existingAccount;\r\n                    let id = Number.parseInt(/\\d+/g.exec(fullName)![0]);\r\n                    let toinsert:IContact={\r\n                        ...contact,\r\n                        accountId,\r\n                        key:`${accountId}-${id}`,\r\n                    };\r\n                    upsertContact(toinsert);\r\n                }\r\n            }else{\r\n                let accountToAdd:IAccountInEdit={\r\n                    ...account,\r\n                    key:`${fundId}-account-${getCurrentAccounts().length}`\r\n                };\r\n                accountToAdd.contacts=account.contacts.map((contact)=>({\r\n                    ...contact,\r\n                    accountId:accountToAdd.key,\r\n                    key:`${accountToAdd.key}-${ Number.parseInt(/\\d+/g.exec(contact.fullName)![0])}`\r\n                }));\r\n                addAccount(accountToAdd);\r\n            }\r\n        }\r\n\r\n        setSelectedContacts([]);\r\n    }\r\n\r\n    return (\r\n        <div className=\"demo-wrapper\">\r\n            <h1>基金管理页面。自定义的状态管理器实现多组件之间的通信</h1>\r\n            <p>左边是历史投资人的信息，右边是待投资的基金，选择投资人信息，导入到新的基金里面，投资公司名称具有唯一性</p>\r\n            \r\n            <DataSourceContext.Provider value={context}>\r\n                <div className=\"fund-wrapper\">\r\n                    <div className=\"left\">\r\n                        <FundList/>\r\n                    </div>\r\n                    <div className='transfer' >\r\n                        <div className=\"center\" onClick={()=>includeToFund()}>\r\n                            <div className={transferClassName} >\r\n                                <PlusCircleOutlined style={{fontSize:'16px',color:'white'}}/>\r\n                            </div>\r\n                            <div className='label'>添加</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"right\">\r\n                        <FundEditor/>\r\n                    </div>\r\n                </div>\r\n            </DataSourceContext.Provider>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FundDemo;\r\n\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport FundDemo from './fund-demo.component';\r\n\r\n\r\n\r\nconst FundDemoRoute:React.FC=()=>{\r\n    return (\r\n        <Route path='/fund-demo/dashboard'><FundDemo/></Route>\r\n    );\r\n}\r\n\r\nexport default FundDemoRoute"],"sourceRoot":""}