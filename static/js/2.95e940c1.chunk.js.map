{"version":3,"sources":["mylib/components/dynamic-dialog/dynamic-dialog.component.tsx","mylib/components/dynamic-dialog/useModal/HookModal.tsx","mylib/components/dynamic-dialog/useModal/index.tsx","mylib/components/dynamic-dialog/index.tsx","mylib/components/flex-form/interface.tsx","mylib/components/flex-form/fields/index.tsx","mylib/hooks/useReadOnly.tsx","mylib/components/flex-form/utils/field-util.tsx","mylib/components/flex-form/flex-form.component.tsx"],"names":["defaultAlignType","points","offset","overflow","adjustX","adjustY","DynamicDialog","props","onCancel","onOk","zIndex","afterClose","visible","keyboard","originalCentered","centered","getContainer","maskStyle","okText","okButtonProps","cancelText","cancelButtonProps","direction","prefixCls","bodyStyle","closable","closeIcon","focusTriggerAfterClose","mask","width","style","maskClosable","autoFocusButton","hideFooter","footer","originalFooter","rootPrefixCls","close","title","originalTitle","dependedElement","align","modalRender","React","useMemo","targetType","element","target","contentPrefixCls","classString","classNames","className","okButton","actionFn","closeModal","autoFocus","buttonProps","cancelButton","length","header","wrapClassName","triggerCancel","transitionName","maskTransitionName","getTransitionName","content","HookModal","ref","config","useState","setVisible","innerConfig","setInnerConfig","useContext","ConfigContext","getPrefixCls","args","some","it","useImperativeHandle","destory","update","newConfig","forwardRef","uuid","destoryFns","ElementsHolder","memo","usePatchElement","elements","patchElement","openDynamicDialog","div","document","createElement","body","append","currentConfig","render","setTimeout","ReactDOM","unmountComponentAtNode","parentNode","removeChild","index","findIndex","splice","push","propsUpdate","DialogService","useDynamicDialog","holderRef","useRef","actionQueue","setActionQueue","useEffect","forEach","openDialogHook","useCallback","originalHideFooter","mergedhideFooter","dynamicHookRef","createRef","hookModal","current","destoryAction","pre","newProps","updateAction","openComponent","ArrayIndexContext","tuple","createContext","FlexFieldContext","Item","Form","List","FlexField","fieldType","options$","children","editable","readonly","changeReadonly","rest","options","setOptions","then","opts","map","label","value","position","paddingRight","readOnly","disabled","mode","Group","right","icon","EditOutlined","onClick","SaveOutlined","getValuePropName","FlexFieldItem","originalName","name","hidden","rules","wrapperCol","labelCol","restProps","arrayIndexContext","toArray","valuePropName","FlexFieldArrayWrapper","fields","operation","remove","field","child","serializeName","serializesName","data","noStyle","DeleteOutlined","Provider","key","FlexFieldItemWrapper","fieldContext","internalReadonly","setInternalReadonly","editableRef","useReadOnly","setReadonly","hasNoLabel","undefined","mergedLabelCol","isGroup","_","omit","isList","meta","PlusCircleOutlined","add","ROOT_NAME","isArray","join","getFlexProps","isPlainObject","last","fieldTypeResolver","convertToNodes","parent","dataObj","visitedNode","metasMap","prefixName","prefixNamePath","Object","entries","node","set","maxlen","arrayChildren","i","childTreeRootNode","buildFlexTree","consolidateTreeNode","result","consolidateFlexTree","root","queue","shift","metas","skipSort","treeNode","Map","metasObj","slice","has","get","defaultLabelCol","sm","span","xs","defaultItemCol","FlexForm","initializeValue","onChange","originalForm","form","useForm","fieldContextValue","initialValues","onFieldsChange","allFields","getFieldsValue","rootNode","convertToFlexFieldElements"],"mappings":"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","file":"static/js/2.95e940c1.chunk.js","sourcesContent":["import React from 'react';\r\nimport {ConfigProvider, Modal} from 'antd';\r\n\r\nimport {ModalFuncProps} from 'antd/lib/modal/Modal';\r\nimport classNames from 'classnames';\r\nimport ActionButton from 'antd/lib/modal/ActionButton';\r\nimport { getTransitionName } from 'antd/lib/_util/motion';\r\nimport {AlignType, TargetType} from 'rc-align/lib/interface';\r\nimport Align from 'rc-align';\r\n\r\nexport interface DynamicDialogProps extends Omit<ModalFuncProps,'type'|'okCancel'|'close'>{\r\n    footer?:React.ReactNode;\r\n    hideFooter?:boolean;    \r\n    rootPrefixCls?: string;\r\n    close: (...args: any[]) => void;\r\n    dependedElement?:HTMLElement;\r\n    align?:AlignType;\r\n}\r\n\r\nconst defaultAlignType:AlignType={\r\n    points:['tl','bl'],\r\n    offset:[0,5],\r\n    overflow:{\r\n        adjustX:true,\r\n        adjustY:true,\r\n    },\r\n}\r\n\r\nexport const DynamicDialog:React.FC<DynamicDialogProps>=(props:DynamicDialogProps)=>{\r\n    const {\r\n        onCancel,\r\n        onOk,\r\n        zIndex,\r\n        afterClose,\r\n        visible,\r\n        keyboard,\r\n        centered:originalCentered,\r\n        getContainer,\r\n        maskStyle,\r\n        okText='OK',\r\n        okButtonProps,\r\n        cancelText,\r\n        cancelButtonProps,\r\n        direction,\r\n        prefixCls='ant',\r\n        bodyStyle,\r\n        closable = false,\r\n        closeIcon,\r\n        focusTriggerAfterClose,\r\n        mask=true,\r\n        width,\r\n        style={},\r\n        maskClosable=false,\r\n        autoFocusButton=false,\r\n        hideFooter=false,\r\n        footer:originalFooter=null,\r\n        rootPrefixCls='ant',\r\n        close,\r\n        title:originalTitle=null,\r\n        dependedElement=null,\r\n        align=defaultAlignType,\r\n      } = props;\r\n      const modalRender=React.useMemo(()=>{\r\n        if(dependedElement===null){\r\n            return undefined;\r\n        }else{\r\n            const targetType:TargetType=()=>{\r\n                return dependedElement;\r\n            }\r\n            return (element:React.ReactNode)=>{\r\n                return (\r\n                    <Align\r\n                        key='align'\r\n                        target={targetType}\r\n                        align={align}\r\n                    >\r\n                        {element as React.ReactElement}\r\n                    </Align>\r\n                )\r\n            }\r\n        }\r\n      },[dependedElement,align]);\r\n\r\n      const centered = !modalRender&&originalCentered;\r\n\r\n      const contentPrefixCls=`${prefixCls}-dynamic-dialog`;\r\n      const classString = classNames(\r\n        contentPrefixCls,\r\n        { [`${contentPrefixCls}-rtl`]: direction === 'rtl' },\r\n        props.className,\r\n      );\r\n      \r\n\r\n      \r\n\r\n      let footer:React.ReactNode=originalFooter;\r\n      if(!hideFooter){\r\n        const okButton = (\r\n            <ActionButton\r\n                actionFn={onOk}\r\n                closeModal={close}\r\n                autoFocus={autoFocusButton==='ok'}\r\n                buttonProps={okButtonProps}\r\n                prefixCls={`${rootPrefixCls}-btn`}\r\n            >\r\n                {okText}\r\n            </ActionButton>\r\n        )\r\n        const cancelButton = !!cancelText&&(typeof cancelText!='string'||cancelText.length>0)?(\r\n            <ActionButton\r\n                actionFn={onCancel}\r\n                closeModal={close}\r\n                autoFocus={autoFocusButton==='cancel'}\r\n                buttonProps={cancelButtonProps}\r\n                prefixCls={`${rootPrefixCls}-btn`}\r\n            >\r\n                {cancelText}\r\n            </ActionButton>\r\n        ):null;\r\n        footer=(\r\n            <div className={`${contentPrefixCls}-btns`}>\r\n                {cancelButton}\r\n                {okButton}\r\n            </div>\r\n        );\r\n      }else{\r\n          footer=null;\r\n      }\r\n      let header=originalTitle;\r\n      if(!!originalTitle&&typeof originalTitle==='string'&&!originalTitle.length){\r\n          header=null;\r\n      }\r\n      if(!!header){\r\n          header = (\r\n            <span className={`${contentPrefixCls}-title`}>{header}</span>\r\n          )\r\n      }\r\n    \r\n\r\n\r\n\r\n    return (\r\n        <Modal\r\n            title=''\r\n            footer=''\r\n            className={classString}\r\n            wrapClassName={classNames({[`${contentPrefixCls}-centered`]:!!centered})}\r\n            onCancel={()=>close({triggerCancel:true})}\r\n            visible={visible}            \r\n            transitionName=''\r\n            maskTransitionName={getTransitionName(rootPrefixCls, 'fade', props.maskTransitionName)}\r\n            mask={mask}\r\n            maskClosable={maskClosable}\r\n            maskStyle={maskStyle}\r\n            style={style}\r\n            width={width}\r\n            zIndex={zIndex}\r\n            afterClose={afterClose}\r\n            keyboard={keyboard}\r\n            centered={centered}\r\n            getContainer={getContainer}\r\n            closable={closable}\r\n            closeIcon={closeIcon}\r\n            modalRender={modalRender}\r\n            focusTriggerAfterClose={focusTriggerAfterClose}\r\n        >\r\n            <div className={`${contentPrefixCls}-body-wrapper`}>\r\n                <ConfigProvider prefixCls={rootPrefixCls}>\r\n                    <div className={`${contentPrefixCls}-body`} style={bodyStyle}>\r\n                        {header}\r\n                        <div className={`${contentPrefixCls}-content`}>{props.content}</div>\r\n                    </div>\r\n                </ConfigProvider>\r\n                {footer}\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\n","import { ConfigContext } from 'antd/lib/config-provider';\r\nimport React from 'react';\r\nimport { InternalDyanmicDialogProps } from '.';\r\nimport { DynamicDialog, DynamicDialogProps } from '../dynamic-dialog.component';\r\n\r\nexport interface DialogHookModelProps{\r\n    afterClose:()=>void;\r\n    config:InternalDyanmicDialogProps;\r\n}\r\n\r\nexport interface DialogHookRef{\r\n    destory:()=>void;\r\n    update:(props:InternalDyanmicDialogProps)=>void;\r\n}\r\n\r\nconst HookModal:React.ForwardRefRenderFunction<DialogHookRef,DialogHookModelProps>=({\r\n    afterClose,\r\n    config,\r\n},ref)=>{\r\n    const [visible,setVisible]=React.useState<boolean>(true);\r\n    const [innerConfig,setInnerConfig]=React.useState<InternalDyanmicDialogProps>(config);\r\n    const {getPrefixCls,direction}=React.useContext(ConfigContext);\r\n\r\n    const prefixCls = getPrefixCls('dynamic-dialog');\r\n    const rootPrefixCls=getPrefixCls();\r\n\r\n    const close=(...args:any[])=>{\r\n        setVisible(false);\r\n        const triggerCancel = args.some(it=>it&&it.triggerCancel);\r\n        if(innerConfig.onCancel&&triggerCancel){\r\n            innerConfig.onCancel();\r\n        }\r\n    }\r\n\r\n    React.useImperativeHandle(ref,()=>({\r\n        destory:close,\r\n        update:(newConfig:Partial<DynamicDialogProps>)=>setInnerConfig({...innerConfig,...newConfig})\r\n    }));\r\n\r\n    return (\r\n        <DynamicDialog\r\n            visible={visible}\r\n            prefixCls={prefixCls}\r\n            rootPrefixCls={rootPrefixCls}\r\n            {...innerConfig}\r\n            close={close}\r\n            afterClose={afterClose}\r\n        />\r\n    )\r\n}\r\n\r\nexport default React.forwardRef(HookModal);","import React from 'react';\r\nimport usePatchElement from 'antd/lib/_util/hooks/usePatchElement';\r\nimport { DynamicDialog, DynamicDialogProps } from '../dynamic-dialog.component';\r\nimport DynamicHookModal, { DialogHookRef } from './HookModal';\r\nimport ReactDOM from 'react-dom';\r\n\r\nlet uuid=0;\r\ninterface ElementsHolderRef{\r\n    patchElement:ReturnType<typeof usePatchElement>[1];\r\n}\r\n\r\nexport interface InternalDyanmicDialogProps extends Omit<DynamicDialogProps,'close'>{\r\n}\r\n\r\nconst destoryFns:Array<()=>void>=[];\r\n\r\nexport function destoryAll(){\r\n    while(destoryFns.length){\r\n        const it = destoryFns.pop();\r\n        it?.();\r\n    }\r\n}\r\n\r\nexport interface OpenHookFunc{\r\n    openDynamicDialog:(props:InternalDyanmicDialogProps)=>DialogHookRef\r\n}\r\n\r\n\r\n\r\nconst ElementsHolder = React.memo(\r\n    React.forwardRef<ElementsHolderRef>((props,ref)=>{\r\n        const [elements,patchElement]=usePatchElement();\r\n        React.useImperativeHandle(ref,()=>({patchElement}));\r\n        return <>{elements}</>;\r\n    })\r\n);\r\n\r\nexport function useDynamicDialog():[OpenHookFunc,React.ReactElement]{\r\n    const holderRef = React.useRef<ElementsHolderRef>(null as any);\r\n    const [actionQueue,setActionQueue]=React.useState<(()=>void)[]>([]);\r\n    React.useEffect(()=>{\r\n        if(actionQueue.length>0){\r\n            actionQueue.forEach(it=>it());\r\n            setActionQueue([]);\r\n        }\r\n        \r\n    },[actionQueue])\r\n\r\n    const openDialogHook = React.useCallback((props:InternalDyanmicDialogProps)=>{\r\n        const {hideFooter:originalHideFooter,footer,okText,cancelText,onOk,onCancel,centered=true}=props;\r\n        const mergedhideFooter = originalHideFooter||\r\n            (!footer&&!okText&&!cancelText&&!onOk&&!onCancel);\r\n        props={centered,...props,hideFooter:mergedhideFooter,};\r\n        uuid++;\r\n        const dynamicHookRef = React.createRef<DialogHookRef>();\r\n        const closeHook=()=>{\r\n            destory?.();\r\n        }\r\n        const hookModal = (\r\n            <DynamicHookModal\r\n                key={uuid}\r\n                config={props}\r\n                afterClose={closeHook}\r\n                ref={dynamicHookRef}\r\n            />);\r\n        const destory = holderRef.current?.patchElement(hookModal);\r\n\r\n        return {\r\n            destory:()=>{\r\n                const destoryAction=()=>{\r\n                    dynamicHookRef.current?.destory();\r\n                }\r\n                if(dynamicHookRef.current){\r\n                    destoryAction();\r\n                }else{\r\n                    setActionQueue(pre=>[...pre,destoryAction]);\r\n                }\r\n            },\r\n            update:(newProps:InternalDyanmicDialogProps)=>{\r\n                const updateAction=()=>{\r\n                    dynamicHookRef.current?.update(newProps);\r\n                }\r\n                if(dynamicHookRef.current){\r\n                    updateAction();\r\n                }else{\r\n                    setActionQueue(pre=>[...pre,updateAction]);\r\n                }\r\n            }\r\n        };\r\n    },[]);\r\n    const openDialog = React.useMemo(()=>({\r\n        openDynamicDialog:openDialogHook\r\n    }),[]);\r\n\r\n    return [openDialog,<ElementsHolder ref={holderRef}/>];\r\n}\r\n\r\nexport function openDynamicDialog(props:InternalDyanmicDialogProps):DialogHookRef{\r\n    const div = document.createElement('div');\r\n    document.body.append(div);\r\n    let currentConfig={...props,visible:true,close};\r\n    \r\n\r\n    function destory(...args:any[]){\r\n        const unmountResult = ReactDOM.unmountComponentAtNode(div);\r\n        if(unmountResult && div.parentNode){\r\n            div.parentNode.removeChild(div);\r\n        }\r\n        const triggerCancel = args.some(it=>it && it.triggerCancel);\r\n        if(props.onCancel&&triggerCancel){\r\n            props.onCancel(...args);\r\n        }\r\n        let index = destoryFns.findIndex(it=>it===close);\r\n        destoryFns.splice(index,1);\r\n    }\r\n\r\n    function render(props:DynamicDialogProps){\r\n        setTimeout(()=>{\r\n            ReactDOM.render(\r\n                <DynamicDialog\r\n                    {...props}\r\n                />,\r\n                div\r\n            )\r\n        })\r\n    }\r\n\r\n    function close(...args:any[]){\r\n        currentConfig={...currentConfig,\r\n            visible:false,\r\n            afterClose:()=>{\r\n                if(typeof props.afterClose==='function'){\r\n                    props.afterClose();\r\n                }\r\n                destory();\r\n            }\r\n        }\r\n        render(currentConfig);\r\n    }\r\n\r\n    function update(propsUpdate:InternalDyanmicDialogProps|((pre:InternalDyanmicDialogProps)=>InternalDyanmicDialogProps)){\r\n        if(typeof propsUpdate ==='function'){\r\n            currentConfig=propsUpdate(currentConfig) as any;\r\n        }else{\r\n            currentConfig={...currentConfig,...propsUpdate};\r\n        }\r\n        render({...currentConfig,close});\r\n    }\r\n\r\n    render(currentConfig);\r\n    destoryFns.push(close);\r\n\r\n    return {\r\n        destory:close,\r\n        update,\r\n    }\r\n}\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport { DynamicDialogProps } from './dynamic-dialog.component';\r\nimport { openDynamicDialog } from './useModal';\r\nimport { DialogHookRef } from './useModal/HookModal';\r\nimport {useDynamicDialog} from './useModal';\r\n\r\nexport interface IOpenPanelProps extends Pick<DynamicDialogProps,\r\n    'content'|\r\n    'title'|\r\n    'footer'|\r\n    'hideFooter'|\r\n    'closable'|\r\n    'okText'|\r\n    'cancelText'|\r\n    'onOk'|\r\n    'onCancel'|\r\n    'maskClosable'|\r\n    'centered'|\r\n    'dependedElement'|\r\n    'align'|\r\n    'afterClose'\r\n    >{\r\n\r\n}\r\n\r\nfunction OpenComponent(props:IOpenPanelProps):DialogHookRef{\r\n    const {hideFooter:originalHideFooter,footer,okText,cancelText,onOk,onCancel,centered=true}=props;\r\n    const mergedhideFooter = originalHideFooter||\r\n        (!footer&&!okText&&!cancelText&&!onOk&&!onCancel);\r\n    return openDynamicDialog({centered,...props,hideFooter:mergedhideFooter});\r\n}\r\n\r\nexport  const DialogService={\r\n    useDynamicDialog,\r\n    openComponent:OpenComponent\r\n}\r\n\r\n","import { ColProps } from \"antd\";\r\nimport { Rule } from \"antd/lib/form\";\r\nimport { FormListFieldData, FormListOperation } from \"antd/lib/form/FormList\";\r\nimport { NamePath } from \"antd/lib/form/interface\";\r\nimport { tuple } from \"antd/lib/_util/type\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nconst FieldTypes = tuple('textbox', 'inputnumber', 'switch', 'select', 'checkbox', 'radiobox','multiselect');\r\nexport type FieldType = typeof FieldTypes[number];\r\n\r\nexport interface FlexFieldProps {\r\n    name: NamePath;\r\n    label: string | React.ReactNode;\r\n    fieldType?: FieldType;\r\n    rules?: Rule[];\r\n    options$?: Promise<({ label: string | React.ReactNode, value: any } | string)[]>;\r\n    isGroup?: boolean;\r\n    isList?: boolean;\r\n    hidden?:boolean;\r\n    readonly?:boolean;\r\n    changeReadonly?:(readonly:boolean)=>void;\r\n    editable?:boolean;\r\n    wrapperCol?: ColProps;\r\n    labelCol?: ColProps;\r\n}\r\n\r\nexport type MetaConfig = Partial<FlexFieldProps> & { arrayChildren?: MetaConfig[][];[k: string]: any; }\r\n\r\nexport interface ConvertContext {\r\n    keyname: string;\r\n    value: any;\r\n    metas?: MetaConfig[];\r\n}\r\n\r\nexport interface InnerFlexFieldProps extends Pick<FlexFieldProps, 'fieldType' | 'options$'|'readonly'> {\r\n    [k: string]: any;\r\n}\r\n\r\nexport interface IFlexTreeNode {\r\n    serializeName: string;\r\n    children?: IFlexTreeNode[];\r\n    data?: FlexFieldProps;\r\n    name: NamePath;\r\n}\r\n\r\nexport interface FieldArrayItem {\r\n    fields: FormListFieldData[];\r\n    operation: FormListOperation,\r\n    meta: { errors: React.ReactNode[] };\r\n    children: IFlexTreeNode[];\r\n    readonly?:boolean;\r\n}\r\n\r\nexport const ArrayIndexContext = React.createContext<NamePath>([]);\r\n\r\nexport interface FlexFieldContextType{\r\n    readonly?:boolean;\r\n    editable?:boolean;\r\n    labelCol?:ColProps;\r\n    wrapperCol?:ColProps;\r\n}\r\n\r\nexport const FlexFieldContext = React.createContext<FlexFieldContextType>({});\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Children } from 'react';\r\nimport { Form, Input, Radio, Select, Switch, Checkbox, Button, InputNumber } from 'antd';\r\nimport { InnerFlexFieldProps, FieldType, FlexFieldProps, IFlexTreeNode, FieldArrayItem, ArrayIndexContext, FlexFieldContext } from '../interface';\r\nimport _ from 'lodash';\r\nimport { NamePath } from 'antd/lib/form/interface';\r\nimport { serializesName } from '../utils/field-util';\r\nimport { DeleteOutlined, EditOutlined, PlusCircleOutlined, SaveOutlined } from '@ant-design/icons';\r\nimport { toArray } from 'rc-field-form/lib/utils/typeUtil';\r\nimport './fields.scss';\r\nimport { useReadOnly } from '../../../hooks/useReadOnly';\r\n//import Checkbox from '../../../../components/checkbox';\r\nconst { Item, List } = Form;\r\n\r\nconst FlexField: React.FC<InnerFlexFieldProps> = ({ \r\n    fieldType, \r\n    children, \r\n    options$,\r\n    editable,\r\n    readonly,\r\n    changeReadonly,\r\n    ...rest }) => {\r\n    const [options, setOptions] = React.useState<{ label: string | React.ReactNode, value: any }[]>([]);\r\n    React.useEffect(() => {\r\n        options$?.then(opts => {\r\n            opts = opts.map(it => typeof it === 'string' ? ({ label: it, value: it }) : it)\r\n            setOptions(opts as any);\r\n        });\r\n    }, [options$]);\r\n    // 注意这边的...rest,之前有个bug, 没加这个，结果，它跟form 关联不上，因为这里面有onChange,value....等一堆东西.\r\n    const getToolbar=()=>{\r\n        if(!editable){\r\n            return null;\r\n        }\r\n        if(readonly){\r\n            return <Button icon={<EditOutlined/>} onClick={()=>changeReadonly(false)}></Button>\r\n        }else{\r\n            return <Button icon={<SaveOutlined/>} onClick={()=>changeReadonly(true)}></Button>\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div style={{position:'relative',paddingRight:'50px',}}>\r\n                {fieldType === 'textbox' ? <Input {...rest} readOnly={readonly} /> : null}\r\n                {fieldType === 'switch' ? <Switch {...rest} disabled={readonly} /> : null}\r\n                {fieldType === 'inputnumber' ? <InputNumber {...rest} readOnly={readonly} /> : null}\r\n                {fieldType === 'select' ? <Select options={options} {...rest} disabled={readonly}></Select> : null}\r\n                {fieldType === 'multiselect'?<Select options={options} mode='multiple' disabled={readonly} {...rest}></Select>:null}\r\n                {\r\n                    fieldType === 'radiobox' ?\r\n                        <Radio.Group options={options} {...rest} disabled={readonly}>\r\n                        </Radio.Group> : null\r\n                }\r\n                {\r\n                    fieldType === 'checkbox' ?\r\n                        <Checkbox.Group options={options} {...rest} disabled={readonly}></Checkbox.Group> : null\r\n                }\r\n                <span style={{position:'absolute',right:'10px'}}>\r\n                    {getToolbar()}\r\n                </span>\r\n                \r\n            </div>  \r\n        </>\r\n    )\r\n}\r\nfunction getValuePropName(fieldType: FieldType | undefined) {\r\n    switch (fieldType) {\r\n        case 'switch': return 'checked';\r\n        default: return 'value';\r\n    }\r\n\r\n}\r\n\r\nconst FlexFieldItem: React.FC<FlexFieldProps> = ({ \r\n    name: originalName, \r\n    label,\r\n    hidden, \r\n    fieldType, \r\n    rules, \r\n    wrapperCol,\r\n    labelCol,\r\n    \r\n    ...restProps }) => {\r\n    const arrayIndexContext = React.useContext(ArrayIndexContext);\r\n    let name = [...toArray(arrayIndexContext), ...toArray(originalName)];\r\n    \r\n    return !hidden?(\r\n        <Item\r\n            name={name}\r\n            label={label}\r\n            valuePropName={getValuePropName(fieldType)}\r\n            rules={rules}\r\n            wrapperCol={wrapperCol}\r\n            labelCol={labelCol}\r\n        >\r\n            <FlexField fieldType={fieldType} {...restProps} />\r\n        </Item>\r\n    ):null;\r\n}\r\n\r\nconst FlexFieldArrayWrapper: React.FC<FieldArrayItem> = ({ fields, operation, children,readonly }) => {\r\n    const { remove } = operation;\r\n    return (\r\n        <>\r\n            {\r\n                fields.map((field, index) => {\r\n                    let child = { ...(children![0] as IFlexTreeNode), ...((children![index] || {}) as IFlexTreeNode) };\r\n                    let name: NamePath = [field.name];\r\n                    let serializeName = serializesName(index);\r\n                    let data = { ...child.data, name } as FlexFieldProps;\r\n                    child = { ...child, name, serializeName, data }\r\n                    return (\r\n                        <Item key={field.key} noStyle>\r\n                            <div className='flex-array-item'>\r\n                                {\r\n                                    readonly?null:<Button className='array-btn' \r\n                                    icon={<DeleteOutlined />} \r\n                                    onClick={() => remove(index)}></Button>\r\n                                }                                \r\n                                <ArrayIndexContext.Provider value={name}>\r\n                                    <FlexFieldItemWrapper  {...child} />\r\n                                </ArrayIndexContext.Provider>                            \r\n                            </div>                            \r\n                        </Item>\r\n                    );\r\n                })\r\n            }\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst FlexFieldItemWrapper: React.FC<IFlexTreeNode> = ({ data, children, name, serializeName }) => {\r\n    const fieldContext=React.useContext(FlexFieldContext);\r\n    const [readonly,setReadonly]=useReadOnly(fieldContext);\r\n    const {editable,labelCol,wrapperCol}=fieldContext;\r\n    const hasNoLabel = data?.label===undefined||data?.label===null||data?.label==='';\r\n    const mergedLabelCol = hasNoLabel?undefined:(data?.labelCol||labelCol);\r\n    if (data?.isGroup) {\r\n        return (\r\n            <Item\r\n                {..._.omit(data, ['name', 'isGroup','fieldType'])}\r\n                className='flex-group'\r\n                noStyle={hasNoLabel}\r\n                labelCol={mergedLabelCol}\r\n            >\r\n                {\r\n                    children?.map(it => (\r\n                        <FlexFieldItemWrapper key={it.serializeName} {...it} />\r\n                    ))\r\n                }\r\n            </Item>\r\n        );\r\n    } else if (data?.isList) {\r\n        return (\r\n            <List name={name}>\r\n                {\r\n                    (fields, operation, meta) => {\r\n                        return (\r\n                            <>\r\n                                <Item \r\n                                label={data?.label}\r\n                                noStyle={hasNoLabel}\r\n                                labelCol={mergedLabelCol}\r\n                                >\r\n                                    <FlexFieldArrayWrapper \r\n                                        fields={fields}\r\n                                        operation={operation}\r\n                                        meta={meta}\r\n                                        children={children as any}\r\n                                        readonly={readonly}\r\n                                        ></FlexFieldArrayWrapper>\r\n                                    {\r\n                                        readonly?null:\r\n                                            <Item>\r\n                                                <Button icon={<PlusCircleOutlined />} onClick={() => operation.add()}>Add</Button>\r\n                                            </Item>\r\n                                    }                                     \r\n                                </Item>\r\n                                \r\n                            </>\r\n                        )\r\n                    }\r\n                }\r\n            </List>\r\n        )\r\n    }\r\n    else {\r\n        return <FlexFieldItem \r\n            {..._.omit(data, ['isGroup', 'isList'])} \r\n            readonly={readonly} \r\n            changeReadonly={setReadonly}\r\n            editable={editable}\r\n            labelCol={mergedLabelCol}\r\n            wrapperCol={wrapperCol}\r\n            ></FlexFieldItem>;\r\n    }\r\n}\r\n\r\nexport default FlexFieldItemWrapper;","import React from 'react';\r\nimport {  FlexFieldContextType } from '../components/flex-form/interface';\r\n\r\nexport function useReadOnly({readonly=false,editable=false}:FlexFieldContextType)\r\n:[boolean,(param:boolean)=>void]\r\n{\r\n    const [internalReadonly,setInternalReadonly]=React.useState(readonly);\r\n    const editableRef=React.useRef(editable);\r\n    editableRef.current=editable;\r\n\r\n    React.useEffect(()=>{\r\n        setInternalReadonly(readonly);\r\n    },[readonly]);\r\n\r\n    const changeReadonly=(target:boolean)=>{\r\n        if(editableRef.current){\r\n            setInternalReadonly(target);\r\n        }\r\n    }\r\n\r\n    return [internalReadonly,changeReadonly];\r\n}","import { NamePath } from \"antd/lib/form/interface\";\r\nimport _ from \"lodash\";\r\nimport React from \"react\";\r\nimport FlexFieldItemWrapper from \"../fields\";\r\nimport FlexFieldItem from \"../fields\";\r\nimport { ConvertContext, FieldType, FlexFieldProps, IFlexTreeNode, MetaConfig } from \"../interface\";\r\n\r\n\r\nexport function fieldTypeResolver(value: any): FieldType {\r\n    let t = typeof value;\r\n    switch (t) {\r\n        case 'string': return 'textbox';\r\n        case 'number':\r\n        case 'bigint': return 'inputnumber';\r\n        case 'boolean': return 'switch';\r\n    }\r\n    return 'textbox';\r\n}\r\n\r\nconst NAME_SPLIT = '__';\r\n\r\nconst ROOT_NAME = 'root';\r\n\r\nexport const serializesName = (name: NamePath) => {\r\n    if (_.isArray(name)) {\r\n        return name.join(NAME_SPLIT);\r\n    } else {\r\n        return `${name}`;\r\n    }\r\n}\r\n\r\nexport function convertToFlexFieldElements(dataObj: any, metas: MetaConfig[] = []): React.ReactElement {\r\n    const rootNode = buildFlexTree(dataObj, metas);\r\n    return (\r\n        <>\r\n            {rootNode.children?.map(it => <FlexFieldItemWrapper key={it.serializeName} {...it} />)}\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n// used to construct the flexprops which will be used to construct field\r\n// we target to determine the name, label, fieldtype of the field, and also, we will pass rules\r\n// options, layout settings e.g. to the FieldProps from meta.\r\n// if result returned from this function, it meas it need to render in DOM, otherwise, it is just a\r\n// virtual node, no DOM render required.\r\nconst getFlexProps = (serializeName: string, name: NamePath, value?: any, meta?: MetaConfig): FlexFieldProps | undefined => {\r\n    // if value is null, and meta is not null, use meta to construct the FlexFieldProps,\r\n    // by defautl fieldType is textbox,\r\n    if (value == null && !!meta) {\r\n        return {fieldType:'textbox', ...meta } as FlexFieldProps;\r\n    } \r\n    // if value is an object,return underfined if meta is null, otherwilse, use meta to render\r\n    // if meta is null, it means current node is a virtual node, we don't need to render it in dom\r\n    // it is just groupped by logic, e.g. {userInfo:{firstName:'San',lastName:'Zhang'}},by default \r\n    // userInfo don't need to render, we only need to render firstName, lastName, unless, we specify \r\n    // meta for userInfo emplicit.\r\n    else if (_.isPlainObject(value)) {\r\n        return !meta ? undefined : {fieldType:'textbox', ...meta } as FlexFieldProps;\r\n    } \r\n    // if value is an array and (we specify from meta that value is a list, or the items in the array is an \r\n    //  object), for this branch, it meas each item of the array is a subtree.\r\n    else if (_.isArray(value) && (meta?.isList || (value.length > 0 && _.isPlainObject(value[0])))) {\r\n        const label = meta?.label || `${_.last(_.toArray(name))}`;\r\n        return {\r\n            name,\r\n            label,\r\n            ...(meta || {}),\r\n            isList: true,\r\n        }\r\n    }\r\n    // by default case, we will determine the fieldType by value type, like number->inputnumber, bool -> switch\r\n    // others text.\r\n    else {\r\n        const fieldType = fieldTypeResolver(value);\r\n        const label = meta?.label || `${_.last(_.toArray(name))}`;\r\n        return {\r\n            name,\r\n            label,\r\n            fieldType,\r\n            ...(meta || {})\r\n        };\r\n    }\r\n}\r\n\r\n\r\n// consturct a tree under the specified parent, tree is mapped both from dataObject and metas.\r\n// every node of the Object or metas must have a node in the tree, but not every node need to render in DOM\r\n// the condition is if the data prop of the tree node exist, data prop will contain all necessery info\r\n// to render Field.\r\nconst convertToNodes = (parent: IFlexTreeNode, dataObj: any, visitedNode: Map<string, IFlexTreeNode>, metasMap: { [k: string]: MetaConfig }) => {\r\n    const { serializeName: prefixName, name: prefixNamePath } = parent;\r\n    for (let [key, value] of Object.entries(dataObj)) {\r\n        // construct the serializedName and namePath\r\n        let serializeName = prefixName === ROOT_NAME ? key : `${prefixName}${NAME_SPLIT}${key}`;\r\n        let meta = metasMap[serializeName];\r\n        if (meta) {\r\n            delete metasMap[serializeName];\r\n        }\r\n        let name = [..._.toArray(prefixNamePath), key] as NamePath;\r\n        let node: IFlexTreeNode = { serializeName, children: [], name };\r\n        // insert current node to the children of parent\r\n        parent.children?.push(node);\r\n        visitedNode.set(serializeName, node);\r\n        // construct the data props, which will be used to render field if not empty\r\n        node.data = getFlexProps(serializeName, name, value, meta);\r\n        // if the child value is an object we just call the function iterate\r\n        if (_.isPlainObject(value) && value != null) {\r\n            convertToNodes(node, value, visitedNode, metasMap);\r\n        } \r\n        // if the child Fields are list, we call the builFlexTree, as for list, we treat it as a sub tree.\r\n        else if (node.data?.isList) {\r\n            let children = [];\r\n            let maxlen = meta.arrayChildren?.length || 1;\r\n            for (let i = 0; i < maxlen; i++) {\r\n                let childTreeRootNode = buildFlexTree(i === 0&&value!=null ? (value as any)[0]||{} : {}, meta?.arrayChildren?.[i] || [], true);\r\n                childTreeRootNode.data = {\r\n                    isGroup: true,\r\n                    name: [],\r\n                    label: '',\r\n                }\r\n                if (childTreeRootNode.children!.length > 0) {\r\n                    children.push(childTreeRootNode);\r\n                }\r\n            }\r\n            node.children = children;\r\n        }\r\n    }\r\n}\r\n\r\n// Tree-Shake, we only keep treenode if it has data, for others we just ignore\r\n// we only check the first level of items which have data props, it may contains data in the \r\n// second/third, or more level, we will do it later.\r\nfunction consolidateTreeNode(node: IFlexTreeNode): IFlexTreeNode[] {\r\n    let result = [];\r\n    if (!!node.data) {\r\n        result.push(node!);\r\n        return result;\r\n    }\r\n    if (!node.children?.length) {\r\n        return [];\r\n    }\r\n    for (let child of node.children) {\r\n        result.push(...consolidateTreeNode(child));\r\n    }\r\n    return result;\r\n}\r\n\r\n//遍历树，去除一些辅助节点，也就是没有Item 的节点。或者没有children 的节点，留下的节点，都是要渲染的。\r\nfunction consolidateFlexTree(root: IFlexTreeNode): IFlexTreeNode {\r\n    let queue: IFlexTreeNode[] = [];\r\n    queue.push(root);\r\n    while (queue.length > 0) {\r\n        let node = queue.shift() as IFlexTreeNode;\r\n        if (!node.children?.length) { continue; }\r\n        let children: IFlexTreeNode[] = [];\r\n        // it meas every child will be render in DOM as Field\r\n        node.children?.forEach(child => {\r\n            children.push(...consolidateTreeNode(child));\r\n        });\r\n        node.children = children;\r\n        queue.push(...children);\r\n    }\r\n    return root;\r\n}\r\n\r\n\r\n// This is the main funciton to construct the Render Tree\r\nfunction buildFlexTree(dataObj: any, metas: MetaConfig[], skipSort?: boolean): IFlexTreeNode {\r\n    let treeNode: Map<string, IFlexTreeNode> = new Map<string, IFlexTreeNode>();\r\n    let metasObj: { [k: string]: MetaConfig } = {};\r\n    // transfer metas array into a meta map, key is the serialize name of meta, value is meta\r\n    for (let meta of metas) {\r\n        let name = serializesName(meta.name!);\r\n        metasObj[name] = meta;\r\n    }\r\n    // This is the root node\r\n    let root: IFlexTreeNode = {\r\n        serializeName: ROOT_NAME,\r\n        children: [],\r\n        name: [],\r\n    }\r\n\r\n    convertToNodes(root, dataObj, treeNode, metasObj);\r\n   \r\n    for (let [key, meta] of Object.entries(metasObj)) {\r\n        const name = _.toArray(meta.name);\r\n        let parent = root;\r\n        for (let i = 0; i < name.length; i++) {\r\n            let serializeName = serializesName(name.slice(0, 1 + i));\r\n            if (!treeNode.has(serializeName)) {\r\n                let node: IFlexTreeNode = {\r\n                    serializeName,\r\n                    children: [],\r\n                    name: name.slice(0, 1 + i),\r\n                    data: meta.isGroup ? undefined : { ...meta } as any,\r\n                }\r\n                parent.children?.push(node);\r\n                parent = node;\r\n            } else {\r\n                parent = treeNode.get(serializeName)!;\r\n            }\r\n        }\r\n    }\r\n\r\n    consolidateFlexTree(root);\r\n    // if (!skipSort) {\r\n    //     sortTree(root);\r\n    // }\r\n\r\n    return root;\r\n}\r\n\r\nfunction sortTree(root: IFlexTreeNode) {\r\n    let queue: IFlexTreeNode[] = [];\r\n    queue.push(root);\r\n    while (queue.length > 0) {\r\n        let node = queue.shift()!;\r\n        if (node.children && node.children.length > 0) {\r\n            node.children = node.children.sort((a, b) => {\r\n                if (!a.children || a.children.length == 0) {\r\n                    return (!b.children || b.children.length == 0) ? a.serializeName.localeCompare(b.serializeName) : -1;\r\n                } else if (!b.children || b.children.length == 0) {\r\n                    return 1;\r\n                } else {\r\n                    return a.serializeName.localeCompare(b.serializeName);\r\n                }\r\n            });\r\n            queue.push(...node.children);\r\n        }\r\n    }\r\n}\r\n\r\n","import { ColProps, Form } from 'antd';\r\nimport { FormInstance, FormProps, useForm } from 'antd/lib/form/Form';\r\nimport React, { useImperativeHandle } from 'react';\r\nimport { FlexFieldContext, MetaConfig } from './interface';\r\nimport { convertToFlexFieldElements } from './utils/field-util';\r\n\r\n\r\nexport interface IFlexInput {\r\n    [k: string]: string | number | boolean;\r\n}\r\n\r\nexport interface IFlexFormProps<T = any> extends Omit<FormProps<T>,'onChange'|'metas'|'initializeValue'>{\r\n    initializeValue: T;\r\n    onChange?: (values: T) => void;\r\n    metas?: MetaConfig[];\r\n    readonly?:boolean;\r\n    editable?:boolean;\r\n    labelCol?:ColProps;\r\n    wrapperCol?:ColProps;\r\n}\r\n\r\nconst defaultLabelCol:ColProps={\r\n    sm:{span:8},\r\n    xs:{span:24},\r\n}\r\nconst defaultItemCol:ColProps={\r\n    sm:{span:16},\r\n    xs:{span:24},\r\n}\r\n\r\nconst FlexForm: React.ForwardRefRenderFunction<FormInstance<any>, IFlexFormProps> = (\r\n    { \r\n        initializeValue, \r\n        onChange, \r\n        metas,\r\n        readonly,\r\n        editable,\r\n        labelCol=defaultLabelCol,\r\n        wrapperCol=defaultItemCol,\r\n        form:originalForm,\r\n        children,\r\n        ...rest }, ref) => {\r\n    const [form] = useForm(originalForm);\r\n    useImperativeHandle(ref, () => {\r\n        return form;\r\n    });\r\n    const fieldContextValue = React.useMemo(()=>({\r\n        readonly,\r\n        editable,\r\n        labelCol,\r\n        wrapperCol,\r\n    }),[readonly,\r\n        editable,\r\n        labelCol,\r\n        wrapperCol,]);\r\n    return (\r\n        <Form\r\n            // fields={fieldsData}\r\n            initialValues={initializeValue}\r\n            form={form}\r\n            onFieldsChange={(fields, allFields) => {\r\n                onChange?.(form.getFieldsValue());\r\n            }}            \r\n            {...rest}\r\n        >\r\n                <FlexFieldContext.Provider value={fieldContextValue}\r\n                >\r\n                    {\r\n                        React.useMemo(() => convertToFlexFieldElements(initializeValue, metas), [metas])\r\n                    }\r\n                </FlexFieldContext.Provider>\r\n                {children}\r\n        </Form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default React.forwardRef(FlexForm);"],"sourceRoot":""}